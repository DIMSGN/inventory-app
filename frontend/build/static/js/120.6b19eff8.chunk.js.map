{"version":3,"file":"static/js/120.6b19eff8.chunk.js","mappings":"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","sources":["components/ProductTable/ProductForm/EditProductForm.js","webpack://inventory-app/./src/components/ProductTable/ProductForm/ProductForm.module.css?fd4b"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./ProductForm.module.css\";\nimport Button from \"../../common/Button/Button\";\nimport { useAppContext } from \"../../../context/AppContext\";\n\n/**\n * EditProductForm component for editing existing products\n * @param {Object} props - Component props\n * @param {Object} props.product - The product to edit\n * @param {Function} props.onClose - Function to close the form\n * @param {Function} props.onUpdateProduct - Function to handle product updates\n */\nconst EditProductForm = ({ product, onClose, onUpdateProduct }) => {\n    const { categories, updateCategory } = useAppContext();\n    const [formData, setFormData] = useState({\n        product_id: product?.product_id || \"\",\n        product_name: product?.product_name || \"\",\n        unit: product?.unit || \"\",\n        category: product?.category || \"\",\n        amount: product?.amount || \"\"\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [showCategoryEdit, setShowCategoryEdit] = useState(false);\n    const [categoryToEdit, setCategoryToEdit] = useState(null);\n    const [newCategoryName, setNewCategoryName] = useState(\"\");\n    const [isUpdatingCategory, setIsUpdatingCategory] = useState(false);\n\n    useEffect(() => {\n        if (product) {\n            setFormData({\n                product_id: product.product_id,\n                product_name: product.product_name,\n                unit: product.unit,\n                category: product.category,\n                amount: product.amount\n            });\n        }\n    }, [product]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({\n            ...formData,\n            [name]: value\n        });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true);\n\n        try {\n            const success = await onUpdateProduct(formData);\n            if (success) {\n                onClose();\n            }\n        } catch (error) {\n            console.error(\"Error updating product:\", error);\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    const handleEditCategory = (category) => {\n        if (typeof category === 'object' && category !== null) {\n            setCategoryToEdit(category);\n            setNewCategoryName(category.name);\n            setShowCategoryEdit(true);\n        }\n    };\n\n    const handleCategoryUpdate = async () => {\n        if (!categoryToEdit || !newCategoryName.trim()) return;\n        \n        setIsUpdatingCategory(true);\n        try {\n            await updateCategory(categoryToEdit.id, newCategoryName);\n            setShowCategoryEdit(false);\n            setCategoryToEdit(null);\n            setNewCategoryName(\"\");\n        } catch (error) {\n            console.error(\"Error updating category:\", error);\n        } finally {\n            setIsUpdatingCategory(false);\n        }\n    };\n\n    return (\n        <form className={styles.form} onSubmit={handleSubmit}>\n            <h2 className={styles.heading}>Product Manager</h2>\n            <label>\n                Product ID:\n                <input\n                    type=\"text\"\n                    name=\"product_id\"\n                    value={formData.product_id}\n                    readOnly\n                    disabled\n                />\n            </label>\n            <label>\n                Product Name:\n                <input\n                    type=\"text\"\n                    name=\"product_name\"\n                    value={formData.product_name}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <label>\n                Unit:\n                <input\n                    type=\"text\"\n                    name=\"unit\"\n                    value={formData.unit}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <div className={styles.categoryContainer}>\n                <label>\n                    Category:\n                    <select\n                        name=\"category\"\n                        value={formData.category}\n                        onChange={handleChange}\n                        required\n                    >\n                        <option value=\"\">Select a category</option>\n                        {categories.map((category, index) => (\n                            <option key={index} value={typeof category === 'object' ? category.id : category}>\n                                {typeof category === 'object' ? category.name : category}\n                            </option>\n                        ))}\n                    </select>\n                </label>\n                <Button\n                    type=\"button\"\n                    variant=\"primary\"\n                    onClick={() => setShowCategoryEdit(!showCategoryEdit)}\n                >\n                    {showCategoryEdit ? \"Hide Category Editor\" : \"Edit Categories\"}\n                </Button>\n            </div>\n\n            {showCategoryEdit && (\n                <div className={styles.categoryEditSection}>\n                    <h3>Edit Category Names</h3>\n                    <p className={styles.helpText}>Select a category to rename it. This will update the category for all products.</p>\n                    \n                    <div className={styles.categoryList}>\n                        {categories.map((category, index) => (\n                            <div key={index} className={styles.categoryItem}>\n                                <span className={styles.categoryName}>\n                                    {typeof category === 'object' ? category.name : category}\n                                </span>\n                                <Button\n                                    type=\"button\"\n                                    variant=\"edit\"\n                                    onClick={() => handleEditCategory(category)}\n                                >\n                                    Edit\n                                </Button>\n                            </div>\n                        ))}\n                    </div>\n\n                    {categoryToEdit && (\n                        <div className={styles.categoryEditForm}>\n                            <h4>Rename \"{categoryToEdit.name}\"</h4>\n                            <div className={styles.editCategoryInput}>\n                                <input\n                                    type=\"text\"\n                                    value={newCategoryName}\n                                    onChange={(e) => setNewCategoryName(e.target.value)}\n                                    placeholder=\"New category name\"\n                                    required\n                                />\n                                <div className={styles.categoryEditButtons}>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"success\"\n                                        onClick={handleCategoryUpdate}\n                                        disabled={isUpdatingCategory}\n                                        icon=\"fas fa-save\"\n                                    >\n                                        {isUpdatingCategory ? \"Updating...\" : \"Update\"}\n                                    </Button>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"secondary\"\n                                        onClick={() => {\n                                            setCategoryToEdit(null);\n                                            setNewCategoryName(\"\");\n                                        }}\n                                        disabled={isUpdatingCategory}\n                                        icon=\"fas fa-times\"\n                                    >\n                                        Cancel\n                                    </Button>\n                                </div>\n                            </div>\n                            <p className={styles.warningText}>\n                                Warning: This will update all products that use this category.\n                            </p>\n                        </div>\n                    )}\n                </div>\n            )}\n\n            <label>\n                Amount:\n                <input\n                    type=\"number\"\n                    name=\"amount\"\n                    value={formData.amount}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <div className={styles.buttonGroup}>\n                <Button\n                    type=\"submit\"\n                    variant=\"success\"\n                    disabled={isSubmitting}\n                    icon=\"fas fa-save\"\n                >\n                    {isSubmitting ? \"Saving...\" : \"Save\"}\n                </Button>\n                <Button\n                    type=\"button\"\n                    onClick={onClose}\n                    variant=\"secondary\"\n                    disabled={isSubmitting}\n                    icon=\"fas fa-times\"\n                >\n                    Cancel\n                </Button>\n            </div>\n        </form>\n    );\n};\n\nexport default EditProductForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ProductForm_form__2eyCa\",\"heading\":\"ProductForm_heading__NA0ph\",\"generatedField\":\"ProductForm_generatedField__9VTzt\",\"fieldNote\":\"ProductForm_fieldNote__1MS8-\",\"newCategoryInput\":\"ProductForm_newCategoryInput__lIdil\",\"deleteCategoryInput\":\"ProductForm_deleteCategoryInput__IIZiA\",\"categorySection\":\"ProductForm_categorySection__yH2V+\",\"buttonGroup\":\"ProductForm_buttonGroup__Q+LmU\",\"customDropdown\":\"ProductForm_customDropdown__nFLPj\",\"selectedCategory\":\"ProductForm_selectedCategory__LPaC+\",\"dropdownMenu\":\"ProductForm_dropdownMenu__VpjEr\",\"dropdownItem\":\"ProductForm_dropdownItem__VkJb6\",\"categoryName\":\"ProductForm_categoryName__ohrn8\",\"deleteButton\":\"ProductForm_deleteButton__L7lFs\",\"addNewCategory\":\"ProductForm_addNewCategory__7EpW5\",\"addCategoryButton\":\"ProductForm_addCategoryButton__yE3NN\",\"noCategories\":\"ProductForm_noCategories__D7dwo\",\"categoryContainer\":\"ProductForm_categoryContainer__pTazC\",\"categoryEditSection\":\"ProductForm_categoryEditSection__Rpx2O\",\"helpText\":\"ProductForm_helpText__fBG5t\",\"warningText\":\"ProductForm_warningText__P8DAq\",\"categoryList\":\"ProductForm_categoryList__T7+n8\",\"categoryItem\":\"ProductForm_categoryItem__7x0wS\",\"categoryEditForm\":\"ProductForm_categoryEditForm__Wkt+4\",\"editCategoryInput\":\"ProductForm_editCategoryInput__Vm+En\",\"categoryEditButtons\":\"ProductForm_categoryEditButtons__+cDWB\"};"],"names":["_ref","product","onClose","onUpdateProduct","categories","updateCategory","useAppContext","formData","setFormData","useState","product_id","product_name","unit","category","amount","isSubmitting","setIsSubmitting","showCategoryEdit","setShowCategoryEdit","categoryToEdit","setCategoryToEdit","newCategoryName","setNewCategoryName","isUpdatingCategory","setIsUpdatingCategory","useEffect","handleChange","e","name","value","target","_jsxs","className","styles","form","onSubmit","async","preventDefault","error","console","children","_jsx","heading","type","readOnly","disabled","onChange","required","categoryContainer","map","index","id","Button","variant","onClick","categoryEditSection","helpText","categoryList","categoryItem","categoryName","handleEditCategory","categoryEditForm","editCategoryInput","placeholder","categoryEditButtons","trim","icon","warningText","buttonGroup"],"sourceRoot":""}