{"version":3,"file":"static/js/61.60e0976a.chunk.js","mappings":"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","sources":["webpack://inventory-app/./src/components/RuleList/RuleList.module.css?c9a7","components/RuleList/RuleList.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listContainer\":\"RuleList_listContainer__xJWOw\",\"listHeader\":\"RuleList_listHeader__w49n8\",\"listDescription\":\"RuleList_listDescription__F1v7E\",\"rulesCount\":\"RuleList_rulesCount__GLyj9\",\"list\":\"RuleList_list__+KPzb\",\"listItem\":\"RuleList_listItem__2IQZe\",\"ruleCard\":\"RuleList_ruleCard__C4exj\",\"ruleHeader\":\"RuleList_ruleHeader__RiX3H\",\"ruleName\":\"RuleList_ruleName__MyZqC\",\"colorIndicator\":\"RuleList_colorIndicator__a-aSJ\",\"ruleDescription\":\"RuleList_ruleDescription__3WFJ+\",\"ruleCondition\":\"RuleList_ruleCondition__v2Buo\",\"rowBecomes\":\"RuleList_rowBecomes__MCkKK\",\"ruleProduct\":\"RuleList_ruleProduct__8w8RQ\",\"ruleGlobal\":\"RuleList_ruleGlobal__i21SW\",\"buttonGroup\":\"RuleList_buttonGroup__vuhuC\",\"emptyState\":\"RuleList_emptyState__69R2J\",\"emptyIcon\":\"RuleList_emptyIcon__eRdh3\",\"helpSection\":\"RuleList_helpSection__2P2cf\",\"helpList\":\"RuleList_helpList__Lctf4\"};","import React, { useState } from \"react\";\nimport Button from \"../common/Button/Button\";\nimport ConfirmationModal from \"../common/ConfirmationModal/ConfirmationModal\";\nimport styles from \"./RuleList.module.css\";\n\nconst RuleList = ({ rules, openRuleModal, onEditRule, handleDelete, onDeleteRule }) => {\n    const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n    const [ruleToDelete, setRuleToDelete] = useState(null);\n\n    // Use openRuleModal if provided, otherwise use onEditRule\n    const editHandler = openRuleModal || onEditRule;\n    \n    // Use handleDelete if provided, otherwise use onDeleteRule\n    const deleteHandler = handleDelete || onDeleteRule;\n\n    // Helper function to get rule comparison display text\n    const getComparisonDisplay = (comparison) => {\n        const displayMap = {\n            \"<\": \"less than\",\n            \">\": \"greater than\",\n            \"=\": \"equal to\",\n            \"==\": \"equal to\",\n            \"<=\": \"less than or equal to\",\n            \">=\": \"greater than or equal to\",\n            \"!=\": \"not equal to\"\n        };\n        return displayMap[comparison] || comparison;\n    };\n\n    // Helper function to format amount values\n    const formatAmount = (amount) => {\n        // Convert to number if it's a string\n        const numAmount = parseFloat(amount);\n        \n        // Check if it's a whole number\n        if (Number.isInteger(numAmount)) {\n            return Math.floor(numAmount);\n        }\n        \n        // Otherwise return the original amount\n        return amount;\n    };\n\n    // Show confirmation modal for rule deletion\n    const confirmDeleteRule = (ruleId) => {\n        setRuleToDelete(ruleId);\n        setShowDeleteConfirmation(true);\n    };\n\n    // Cancel rule deletion\n    const cancelDeleteRule = () => {\n        setRuleToDelete(null);\n        setShowDeleteConfirmation(false);\n    };\n\n    // Handle rule deletion after confirmation\n    const handleDeleteRuleConfirmed = () => {\n        if (ruleToDelete && deleteHandler) {\n            deleteHandler(ruleToDelete);\n            setShowDeleteConfirmation(false);\n            setRuleToDelete(null);\n        }\n    };\n\n    // Find the rule name for the deletion confirmation\n    const getRuleToDeleteName = () => {\n        if (!ruleToDelete) return \"\";\n        const rule = rules.find(r => r.id === ruleToDelete);\n        return rule ? rule.rules : \"\";\n    };\n    \n    if (rules.length === 0) {\n        return (\n            <div className={styles.emptyState}>\n                <div className={styles.emptyIcon}>ðŸ“‹</div>\n                <h3>No Rules Available</h3>\n                <p>Rules help you monitor inventory levels by highlighting products that match specific conditions.</p>\n                <p>Click the \"Add Rule\" button to create your first inventory rule.</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.listContainer}>\n            <div className={styles.listHeader}>\n                <h2>Inventory Rules</h2>\n                <p className={styles.listDescription}>\n                    Rules automatically highlight products in your inventory when specific conditions are met.\n                </p>\n            </div>\n            \n            <div className={styles.rulesCount}>\n                <span>{rules.length} {rules.length === 1 ? 'rule' : 'rules'} configured</span>\n            </div>\n            \n            <ul className={styles.list}>\n                {rules.map((rule) => (\n                    <li key={rule.id} className={styles.listItem}>\n                        <div className={styles.ruleCard}>\n                            <div className={styles.ruleHeader}>\n                                <div className={styles.ruleName}>{rule.rules}</div>\n                            </div>\n                            \n                            <div className={styles.ruleDescription}>\n                                <div className={styles.ruleCondition}>\n                                    When inventory is <strong>{getComparisonDisplay(rule.comparison)}</strong> <strong>{formatAmount(rule.amount)}</strong>\n                                    <span className={styles.rowBecomes}> the row becomes </span>\n                                    <div \n                                        className={styles.colorIndicator} \n                                        style={{ backgroundColor: rule.color }}\n                                        title=\"This color will highlight products when the rule condition is met\"\n                                    />\n                                </div>\n                                \n                                {rule.product_id && (\n                                    <div className={styles.ruleProduct}>\n                                        Applied to product ID: {rule.product_id}\n                                    </div>\n                                )}\n                                \n                                {!rule.product_id && (\n                                    <div className={styles.ruleGlobal}>\n                                        Applied to all products\n                                    </div>\n                                )}\n                            </div>\n                            \n                            <div className={styles.buttonGroup}>\n                                <Button\n                                    variant=\"edit\"\n                                    onClick={() => editHandler(rule)}\n                                    title=\"Edit this rule\"\n                                    icon=\"fas fa-edit\"\n                                >\n                                    Edit\n                                </Button>\n                                <Button\n                                    variant=\"delete\"\n                                    onClick={() => confirmDeleteRule(rule.id)}\n                                    title=\"Delete this rule\"\n                                    icon=\"fas fa-trash-alt\"\n                                >\n                                    Delete\n                                </Button>\n                            </div>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n            \n            <div className={styles.helpSection}>\n                <h4>About Inventory Rules</h4>\n                <p>Rules help you monitor inventory levels by highlighting products when specific conditions are met.</p>\n                <ul className={styles.helpList}>\n                    <li>Create rules for individual products or apply them globally to all items</li>\n                    <li>Set conditions using comparison operators like less than, greater than, or equal to</li>\n                    <li>Choose custom colors to differentiate between different types of alerts</li>\n                </ul>\n            </div>\n\n            {/* Delete Confirmation Modal */}\n            {showDeleteConfirmation && (\n                <ConfirmationModal\n                    title=\"Delete Rule\"\n                    message={`Are you sure you want to delete the rule \"${getRuleToDeleteName()}\"? This will remove the rule from your inventory system and affected products will no longer be highlighted according to this rule.`}\n                    onConfirm={handleDeleteRuleConfirmed}\n                    onCancel={cancelDeleteRule}\n                    confirmButtonText=\"Delete Rule\"\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonVariant=\"danger\"\n                />\n            )}\n        </div>\n    );\n};\n\nexport default RuleList;"],"names":["_ref","rules","openRuleModal","onEditRule","handleDelete","onDeleteRule","showDeleteConfirmation","setShowDeleteConfirmation","useState","ruleToDelete","setRuleToDelete","editHandler","deleteHandler","formatAmount","amount","numAmount","parseFloat","Number","isInteger","Math","floor","length","_jsxs","className","styles","children","_jsx","map","rule","comparison","style","backgroundColor","color","title","product_id","Button","variant","onClick","icon","confirmDeleteRule","ruleId","id","ConfirmationModal","message","getRuleToDeleteName","find","r","onConfirm","handleDeleteRuleConfirmed","onCancel","cancelDeleteRule","confirmButtonText","cancelButtonText","confirmButtonVariant"],"sourceRoot":""}