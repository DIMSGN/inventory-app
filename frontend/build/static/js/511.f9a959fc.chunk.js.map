{"version":3,"file":"static/js/511.f9a959fc.chunk.js","mappings":"kMAYA,MAwOA,EAxOwBA,IAA4C,IAA3C,QAAEC,EAAO,QAAEC,EAAO,gBAAEC,GAAiBH,EAC1D,MAAM,WAAEI,EAAU,eAAEC,IAAmBC,EAAAA,EAAAA,OAChCC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACrCC,YAAmB,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAASS,aAAc,GACnCC,cAAqB,OAAPV,QAAO,IAAPA,OAAO,EAAPA,EAASU,eAAgB,GACvCC,MAAa,OAAPX,QAAO,IAAPA,OAAO,EAAPA,EAASW,OAAQ,GACvBC,UAAiB,OAAPZ,QAAO,IAAPA,OAAO,EAAPA,EAASY,WAAY,GAC/BC,QAAe,OAAPb,QAAO,IAAPA,OAAO,EAAPA,EAASa,SAAU,MAExBC,EAAcC,IAAmBP,EAAAA,EAAAA,WAAS,IAC1CQ,EAAkBC,IAAuBT,EAAAA,EAAAA,WAAS,IAClDU,EAAgBC,IAAqBX,EAAAA,EAAAA,UAAS,OAC9CY,EAAiBC,IAAsBb,EAAAA,EAAAA,UAAS,KAChDc,EAAoBC,IAAyBf,EAAAA,EAAAA,WAAS,IAE7DgB,EAAAA,EAAAA,YAAU,KACFxB,GACAO,EAAY,CACRE,WAAYT,EAAQS,WACpBC,aAAcV,EAAQU,aACtBC,KAAMX,EAAQW,KACdC,SAAUZ,EAAQY,SAClBC,OAAQb,EAAQa,QAExB,GACD,CAACb,IAEJ,MAAMyB,EAAgBC,IAClB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BtB,EAAY,IACLD,EACH,CAACqB,GAAOC,GACV,EA2CN,OACIE,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAAA,EAAOC,KAAMC,SAzCbC,UACjBT,EAAEU,iBACFrB,GAAgB,GAEhB,UAC0Bb,EAAgBI,IAElCL,GAER,CAAE,MAAOoC,GACLC,QAAQD,MAAM,0BAA2BA,EAC7C,CAAC,QACGtB,GAAgB,EACpB,GA4BqDwB,SAAA,EACjDC,EAAAA,EAAAA,KAAA,MAAIT,UAAWC,EAAAA,EAAOS,QAAQF,SAAC,qBAC/BT,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,eAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLf,KAAK,aACLC,MAAOtB,EAASG,WAChBkC,UAAQ,EACRC,UAAQ,QAGhBd,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,iBAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLf,KAAK,eACLC,MAAOtB,EAASI,aAChBmC,SAAUpB,EACVqB,UAAQ,QAGhBhB,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,SAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLf,KAAK,OACLC,MAAOtB,EAASK,KAChBkC,SAAUpB,EACVqB,UAAQ,QAGhBhB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOe,kBAAkBR,SAAA,EACrCT,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,aAEHT,EAAAA,EAAAA,MAAA,UACIH,KAAK,WACLC,MAAOtB,EAASM,SAChBiC,SAAUpB,EACVqB,UAAQ,EAAAP,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQZ,MAAM,GAAEW,SAAC,sBAChBpC,EAAW6C,KAAI,CAACpC,EAAUqC,KACvBT,EAAAA,EAAAA,KAAA,UAAoBZ,MAA2B,kBAAbhB,EAAwBA,EAASsC,GAAKtC,EAAS2B,SACxD,kBAAb3B,EAAwBA,EAASe,KAAOf,GADvCqC,YAMzBT,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLU,QAAQ,UACRC,QAASA,IAAMpC,GAAqBD,GAAkBuB,SAErDvB,EAAmB,uBAAyB,uBAIpDA,IACGc,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOsB,oBAAoBf,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAAA,KAAGT,UAAWC,EAAAA,EAAOuB,SAAShB,SAAC,qFAE/BC,EAAAA,EAAAA,KAAA,OAAKT,UAAWC,EAAAA,EAAOwB,aAAajB,SAC/BpC,EAAW6C,KAAI,CAACpC,EAAUqC,KACvBnB,EAAAA,EAAAA,MAAA,OAAiBC,UAAWC,EAAAA,EAAOyB,aAAalB,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,QAAMT,UAAWC,EAAAA,EAAO0B,aAAanB,SACZ,kBAAb3B,EAAwBA,EAASe,KAAOf,KAEpD4B,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLU,QAAQ,OACRC,QAASA,IAjGbzC,KACA,kBAAbA,GAAsC,OAAbA,IAChCO,EAAkBP,GAClBS,EAAmBT,EAASe,MAC5BV,GAAoB,GACxB,EA4F2C0C,CAAmB/C,GAAU2B,SAC/C,WARKU,OAejB/B,IACGY,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAO4B,iBAAiBrB,SAAA,EACpCT,EAAAA,EAAAA,MAAA,MAAAS,SAAA,CAAI,WAASrB,EAAeS,KAAK,QACjCG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAO6B,kBAAkBtB,SAAA,EACrCC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLd,MAAOR,EACPyB,SAAWnB,GAAML,EAAmBK,EAAEG,OAAOD,OAC7CkC,YAAY,oBACZhB,UAAQ,KAEZhB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAO+B,oBAAoBxB,SAAA,EACvCC,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLU,QAAQ,UACRC,QAhHPlB,UACzB,GAAKjB,GAAmBE,EAAgB4C,OAAxC,CAEAzC,GAAsB,GACtB,UACUnB,EAAec,EAAegC,GAAI9B,GACxCH,GAAoB,GACpBE,EAAkB,MAClBE,EAAmB,GACvB,CAAE,MAAOgB,GACLC,QAAQD,MAAM,2BAA4BA,EAC9C,CAAC,QACGd,GAAsB,EAC1B,CAZsD,CAYtD,EAoGgCqB,SAAUtB,EACV2C,KAAK,cAAa1B,SAEjBjB,EAAqB,cAAgB,YAE1CkB,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLU,QAAQ,YACRC,QAASA,KACLlC,EAAkB,MAClBE,EAAmB,GAAG,EAE1BuB,SAAUtB,EACV2C,KAAK,eAAc1B,SACtB,kBAKTC,EAAAA,EAAAA,KAAA,KAAGT,UAAWC,EAAAA,EAAOkC,YAAY3B,SAAC,0EAQlDT,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,WAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,SACLf,KAAK,SACLC,MAAOtB,EAASO,OAChBgC,SAAUpB,EACVqB,UAAQ,QAGhBhB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOmC,YAAY5B,SAAA,EAC/BC,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLU,QAAQ,UACRR,SAAU9B,EACVmD,KAAK,cAAa1B,SAEjBzB,EAAe,YAAc,UAElC0B,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLW,QAASpD,EACTmD,QAAQ,YACRR,SAAU9B,EACVmD,KAAK,eAAc1B,SACtB,gBAIF,C,2GCrOf,MAqRA,EAvPuBxC,IAAkB,IAAjB,QAAEE,GAASF,EAC/B,MAAM,WAAEqE,EAAU,YAAEC,EAAW,eAAEC,EAAc,WAAEnE,EAAU,SAAEoE,IAAalE,EAAAA,EAAAA,OACnEmE,EAAaC,IAAkBjE,EAAAA,EAAAA,UAAS,KACxCF,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACrCC,WAAY,KACZC,aAAc,GACdC,KAAM,GACNC,SAAU,GACVC,OAAQ,MAEL6D,EAAkBC,IAAuBnE,EAAAA,EAAAA,UAAS,OAClDM,EAAcC,IAAmBP,EAAAA,EAAAA,WAAS,GAC3CoE,GAAiBC,EAAAA,EAAAA,QAAO,OAG9BrD,EAAAA,EAAAA,YAAU,KACN,GAAI+C,GAAYA,EAASO,QAAU,EAAG,CAClC,MAAMC,EA/CQR,IACjBA,GAAgC,IAApBA,EAASO,OAKRE,KAAKC,OAAOV,EAASvB,KAAIhD,GAET,kBAAvBA,EAAQS,WACTyE,SAASlF,EAAQS,WAAY,IAC7BT,EAAQS,cAGC,EAXR,EA6CY0E,CAAiBZ,GAChChE,GAAY6E,IAAS,IACdA,EACH3E,WAAYsE,KAEpB,IACD,CAACR,KAEJ/C,EAAAA,EAAAA,YAAU,KAEFoD,EAAeS,SACfT,EAAeS,QAAQC,OAC3B,GACD,IAEH,MAAM7D,EAAgBC,IAClB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAI1B,GAHAS,QAAQiD,IAAI,cAAc5D,iBAAoBC,mBAAuBA,MAGxD,aAATD,EAAqB,CACrBW,QAAQiD,IAAI,qBAAsB3D,GAGlC,MAAM4D,EAAYC,MAAM7D,GAA+BA,EAAtBsD,SAAStD,EAAO,IACjDU,QAAQiD,IAAI,6BAA8BC,EAAU,gBAAiBA,EAAU,KAE/EjF,EAAY,IACLD,EACH,CAACqB,GAAO6D,GAEhB,MACIjF,EAAY,IACLD,EACH,CAACqB,GAAOC,GAEhB,EA4EJ,OACIE,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAAA,EAAOC,KAAMC,SA1EbC,UACjBT,EAAEU,iBACFrB,GAAgB,GAEhB,IAEI,IAAKT,EAASG,aAAeH,EAASI,eAAiBJ,EAASK,OAASL,EAASM,UAAgC,KAApBN,EAASO,OAGnG,OAFA6E,EAAAA,EAAAA,IAAU,gCACV3E,GAAgB,GAKpB,MAAM4E,EAAa,IACZrF,EACHG,WAAYyE,SAAS5E,EAASG,WAAY,WAGxB2D,EAAWuB,IAE7B1F,GAER,CAAE,MAAOoC,GACLC,QAAQD,MAAM,yBAA0BA,IACxCqD,EAAAA,EAAAA,IAAUrD,EAAMuD,SAAW,wBAC/B,CAAC,QACG7E,GAAgB,EACpB,GA+CqDwB,SAAA,EACjDC,EAAAA,EAAAA,KAAA,MAAIT,UAAWC,EAAAA,EAAOS,QAAQF,SAAC,qBAC/BT,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,eAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLf,KAAK,aACLC,MAAOtB,EAASG,WAAa,IAlJxByC,EAkJ4C5C,EAASG,WAjJnEyC,EAAG2C,WAAWC,SAAS,EAAG,OAiJyD,GAC1EnD,UAAQ,EACRZ,UAAWC,EAAAA,EAAO+D,kBAEtBvD,EAAAA,EAAAA,KAAA,SAAOT,UAAWC,EAAAA,EAAOgE,UAAUzD,SAAC,qCAExCT,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,iBAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLf,KAAK,eACLC,MAAOtB,EAASI,aAChBmC,SAAUpB,EACVwE,IAAKrB,EACL9B,UAAQ,QAGhBhB,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,SAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLf,KAAK,OACLC,MAAOtB,EAASK,KAChBkC,SAAUpB,EACVqB,UAAQ,QAGhBhB,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,aAEHT,EAAAA,EAAAA,MAAA,UACIH,KAAK,WACLC,MAAOtB,EAASM,SAChBiC,SAAUpB,EACVqB,UAAQ,EAAAP,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQZ,MAAM,GAAEW,SAAC,sBAChBpC,EAAW6C,KAAI,CAACpC,EAAUqC,KACvBT,EAAAA,EAAAA,KAAA,UAAoBZ,MAA2B,kBAAbhB,EAAwBA,EAASsC,GAAKtC,EAAS2B,SACxD,kBAAb3B,EAAwBA,EAASe,KAAOf,GADvCqC,YAMzBnB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOkE,gBAAgB3D,SAAA,EACnCT,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOmE,iBAAiB5D,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLoB,YAAY,oBACZlC,MAAO4C,EACP3B,SAAWnB,GAAM+C,EAAe/C,EAAEG,OAAOD,UAE7CY,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLW,QAxGMlB,UACtB,GAAKqC,EAAYR,OAKjB,GAAI7D,EAAWiG,SAAS5B,EAAYR,SAChC0B,EAAAA,EAAAA,IAAU,gCAId,UACUrB,EAAYG,GAClBC,EAAe,GACnB,CAAE,MAAOpC,GACLC,QAAQD,MAAM,yBAA0BA,IACxCqD,EAAAA,EAAAA,IAAUrD,EAAMuD,SAAW,yBAC/B,MAfIF,EAAAA,EAAAA,IAAU,gCAed,EAwFgBtC,QAAQ,UACRa,KAAK,cAAa1B,SACrB,qBAILT,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOqE,oBAAoB9D,SAAA,EACvCT,EAAAA,EAAAA,MAAA,UACIF,MAAO8C,GAAoB,GAC3B7B,SAAWnB,GAAMiD,EAAoBjD,EAAEG,OAAOD,OAAOW,SAAA,EAErDC,EAAAA,EAAAA,KAAA,UAAQZ,MAAM,GAAEW,SAAC,gCAChBpC,EAAW6C,KAAI,CAACpC,EAAUqC,KACvBT,EAAAA,EAAAA,KAAA,UAAoBZ,MAA2B,kBAAbhB,EAAwBA,EAASsC,GAAKtC,EAAS2B,SACxD,kBAAb3B,EAAwBA,EAASe,KAAOf,GADvCqC,SAKrBT,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLW,QAzGSlB,UACzB,GAAKuC,EAKL,UACUJ,EAAeI,GACrBC,EAAoB,MAGhBrE,EAASM,WAAa8D,GACtBnE,EAAY,IACLD,EACHM,SAAU,IAGtB,CAAE,MAAOyB,GACLC,QAAQD,MAAM,2BAA4BA,IAC1CqD,EAAAA,EAAAA,IAAUrD,EAAMuD,SAAW,4BAC/B,MAlBIF,EAAAA,EAAAA,IAAU,qCAkBd,EAsFgBtC,QAAQ,SACRa,KAAK,mBAAkB1B,SAC1B,2BAKTT,EAAAA,EAAAA,MAAA,SAAAS,SAAA,CAAO,WAEHC,EAAAA,EAAAA,KAAA,SACIE,KAAK,SACLf,KAAK,SACLC,MAAOtB,EAASO,OAChBgC,SAAUpB,EACVqB,UAAQ,QAGhBhB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOmC,YAAY5B,SAAA,EAC/BC,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CAACT,KAAK,SAASU,QAAQ,UAAUa,KAAK,cAAcrB,SAAU9B,EAAayB,SAC7EzB,EAAe,YAAc,iBAElC0B,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACHT,KAAK,SACLW,QAASpD,EACTmD,QAAQ,YACRR,SAAU9B,EACVmD,KAAK,eAAc1B,SACtB,iBAxPQW,KA4PV,C,iCC3Rf,SAAgB,KAAO,0BAA0B,QAAU,6BAA6B,eAAiB,oCAAoC,UAAY,+BAA+B,iBAAmB,sCAAsC,oBAAsB,yCAAyC,gBAAkB,qCAAqC,YAAc,iCAAiC,eAAiB,oCAAoC,iBAAmB,sCAAsC,aAAe,kCAAkC,aAAe,kCAAkC,aAAe,kCAAkC,aAAe,kCAAkC,eAAiB,oCAAoC,kBAAoB,uCAAuC,aAAe,kCAAkC,kBAAoB,uCAAuC,oBAAsB,yCAAyC,SAAW,8BAA8B,YAAc,iCAAiC,aAAe,kCAAkC,aAAe,kCAAkC,iBAAmB,sCAAsC,kBAAoB,uCAAuC,oBAAsB,yC,mFCEvyC,MA0CA,EA1CgCoD,CAAC/B,EAAUgC,KACvC,IAAKC,MAAMC,QAAQlC,GAEf,YADAjC,QAAQD,MAAM,iCAIlB,MAAMqE,EAAM,IAAIC,EAAAA,MAChBD,EAAIE,QAAQ,SACZF,EAAIG,KAAK,qBAAsB,GAAI,IAEnC,MAAMC,EAAoBvC,EAASvB,KAAIhD,IACnC,MAAM+G,EAAYR,EAAMS,MAAKC,GAAQA,EAAKxG,aAAeT,EAAQS,YAA6B,YAAfwG,EAAKC,QAC9EC,EAAeJ,EAAYA,EAAUlG,OAASb,EAAQa,OAAS,EACrE,MAAO,CACHJ,WAAYT,EAAQS,WACpBC,aAAcV,EAAQU,aACtB0G,eAAgBpH,EAAQa,OACxBwG,cAAeF,EAAe,EAAIA,EAAe,EACjDxG,KAAMX,EAAQW,KACdC,SAAUZ,EAAQY,SACrB,IAGL8F,EAAIY,UAAU,CACVC,OAAQ,GACRC,KAAM,CAAC,CAAC,aAAc,OAAQ,iBAAkB,gBAAiB,OAAQ,aACzEC,KAAMX,EAAkB9D,KAAI0E,GAAQ,CAChCA,EAAKjH,WACLiH,EAAKhH,aACLgH,EAAKN,eACLM,EAAKL,cACLK,EAAK/G,KACL+G,EAAK9G,YAET+G,MAAO,UACPC,WAAY,CAAEC,UAAW,CAAC,GAAI,IAAK,MACnC7F,OAAQ,CAAE8F,YAAa,EAAGC,SAAU,MAGxCrB,EAAIsB,KAAK,yBAAyB,ECzCtC,EAA0I,4CAA1I,EAAuM,6CAAvM,EAAwQ,gDAAxQ,EAA6U,iDAA7U,EAAuZ,qDAAvZ,EAAie,iD,aCAje,QAAiC,uCAAjC,EAA6S,qC,aCa7S,MA2KA,EA3KuBjI,IAAoE,IAAnE,SAAEwE,EAAQ,sBAAE0D,EAAqB,yBAAEC,GAA0BnI,EACjF,MAAOoI,EAASC,IAAc5H,EAAAA,EAAAA,UAAS,KACjC,WAAEL,IAAeE,EAAAA,EAAAA,OAGvBmB,EAAAA,EAAAA,YAAU,KAKN,GAJAc,QAAQiD,IAAI,2BAA4BhB,GACxCjC,QAAQiD,IAAI,qCAAsCpF,GAClDmC,QAAQiD,IAAI,mCAAoC0C,GAE5C9H,GAAcA,EAAW2E,OAAS,EAAG,CAErC,MAyBMuD,EAAiB,CANK,CACxBzG,MAAO,MACP0G,MAAO,iBACPC,SAAS,MAtBWpI,EAAW6C,KAAIpC,GAEX,kBAAbA,GAAsC,OAAbA,GAChC0B,QAAQiD,IAAI,mBAAoB3E,GACzB,CACHgB,MAAOhB,EAASsC,GAAG2C,WACnByC,MAAO1H,EAASe,QAIpBW,QAAQiD,IAAI,mBAAoB3E,GACzB,CACHgB,MAAOhB,EACP0H,MAAO1H,OAanB0B,QAAQiD,IAAI,yBAA0B8C,GACtCD,EAAWC,EACf,IACD,CAAClI,EAAY8H,EAAuB1D,IAmGvC,OACIzC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBO,SAAA,EAClCC,EAAAA,EAAAA,KAACgG,EAAAA,GAAM,CACHC,SAAO,EACP9G,KAAK,aACLwG,QAASA,EACTpG,UAAWC,EACX0G,gBAAgB,SAChB9G,MAAOqG,EACPpF,SA1GU8F,IAIlB,GAHArG,QAAQiD,IAAI,oBAAqBoD,GAG5BA,GAA8C,IAA3BA,EAAgB7D,OAMxC,GAAI6D,GACAA,EAAgBC,MAAKC,GAA2B,QAAjBA,EAAOjH,SACtC+G,EAAgB7D,OAAS,EAF7B,CAII,MAAMgE,EAAsBX,EAAQnB,MAAK6B,GAA2B,QAAjBA,EAAOjH,QAC1DsG,EAAyB,CAACY,GAE9B,MAIA,GAAIH,GACAA,EAAgB7D,OAAS,GACzB6D,EAAgBC,MAAKC,GAA2B,QAAjBA,EAAOjH,QAF1C,CAII,MAAMmH,EAAkBJ,EAAgBK,QAAOH,GAA2B,QAAjBA,EAAOjH,QAChEsG,EAAyBa,EAE7B,MAGAb,EAAyBS,QA1BrBT,EAAyB,GA0BY,EA4EjCpE,YAAY,uBACZ9B,OA1ES,CACjBiH,QAAUC,IAAI,IACPA,EACHC,UAAW,OACXC,OAAQ,iBACRC,UAAW,OACX,UAAW,CACPC,YAAa,oBAGrBC,KAAOL,IAAI,IACJA,EACHM,OAAQ,KACRC,UAAW,MACXJ,UAAW,8BACXK,SAAU,WACVC,MAAO,SAEXC,SAAWV,IAAI,IACRA,EACHW,QAAS,MACTC,UAAW,UAEfjB,OAAQA,CAACK,EAAMa,KAAK,IACbb,EACHc,gBAAiBD,EAAME,WACjB,iBACAF,EAAMG,UACF,0BACA,QACVhD,MAAO6C,EAAME,WAAa,QAAU,OACpCE,OAAQ,UACRC,aAAc,MACdC,aAAc,MACdR,QAAS,WACT,UAAW,CACPG,gBAAiBD,EAAME,WACjB,iBACA,2BAEVK,QAAS,UAEbC,WAAarB,IAAI,IACVA,EACHc,gBAAiB,0BACjBI,aAAc,QAElBI,gBAAkBtB,IAAI,IACfA,EACHhC,MAAO,OACPuD,WAAY,MACZZ,QAAS,YAEba,iBAAmBxB,IAAI,IAChBA,EACHhC,MAAO,OACP,SAAU,CACN8C,gBAAiB,0BACjB9C,MAAO,WAiBPyD,aAAa,EACbC,mBAAmB,EACnBC,qBAAqB,EACrBC,0BAA0B,EAC1BC,mBAAmB,EACnBC,iBAAkBC,SAASxD,KAC3ByD,aAAc,QACdC,cAAc,OACdC,cAAc,EACdC,uBAAuB,EACvBC,WAAW,KAEfxJ,EAAAA,EAAAA,MAAA,OAAKyJ,MAAO,CAACjB,QAAS,QAAQ/H,SAAA,CAAC,UACnB4F,EAAQrD,OAAO,gCAEzB,E,sBC7Kd,MAwLA,EAxL6B/E,IAQtB,IARuB,kBAC1ByL,EAAiB,iBACjBC,EAAgB,cAChBC,EAAa,aACbC,EAAY,qBACZC,EAAoB,SACpBrH,EAAQ,MACRgC,GACHxG,EACG,MAAO8L,EAAoBC,IAAyBtL,EAAAA,EAAAA,WAAS,IACvD,sBAAEyH,EAAqB,yBAAEC,EAAwB,iBAAE6D,IAAqB1L,EAAAA,EAAAA,OACvE2L,EAAiBC,IAAsBzL,EAAAA,EAAAA,WAAS,IAChD0L,EAA4BC,IAAiC3L,EAAAA,EAAAA,WAAS,GAG7E8B,QAAQiD,IAAI,8CAA+ChB,GAC3DjC,QAAQiD,IAAI,2BAA4BwG,EAAiBjH,QA0BzD,OACIhD,EAAAA,EAAAA,MAAAsK,EAAAA,SAAA,CAAA7J,SAAA,EACIT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUQ,SAAA,EAErBT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeQ,SAAA,EAC1BT,EAAAA,EAAAA,MAAA,UAAQC,UAAU,iBAAiBsB,QAASmI,EAAkBjJ,SAAA,EAC1DC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,gBAAgB,mBAGpCD,EAAAA,EAAAA,MAAA,UAAQC,UAAU,mBAAmBsB,QAASoI,EAAiBlJ,SAAA,EAC3DC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,gBAAgB,aAIpCD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBQ,SAAA,EAC7BT,EAAAA,EAAAA,MAAA,UAAQC,UAAU,mBAAmBsB,QAvC5BiJ,KACzBR,GAAuBD,EAAmB,EAsCyCtJ,SAAA,EAC/DC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,uBAAuB,YAAQS,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,yBAGlE8J,IACG/J,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBQ,SAAA,EAC7BT,EAAAA,EAAAA,MAAA,UAAQuB,QAzCVkJ,KACtBN,GAAmB,GACnBH,GAAsB,EAAM,EAuC+BvJ,SAAA,EAC/BC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,oBAAoB,oBAGxCD,EAAAA,EAAAA,MAAA,UAAQuB,QAxCEmJ,KAClCL,GAA8B,GAC9BL,GAAsB,EAAM,EAsC2CvJ,SAAA,EAC3CC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,yBAAyB,yCAQ7DS,EAAAA,EAAAA,KAAA,OAAKT,UAAU,kBAAiBQ,UAE5BT,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAsBO,SAAA,EAClCC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,iBAAiB,uBACZgK,EAAiBjH,aAI9CtC,EAAAA,EAAAA,KAAA,OAAKT,UAAU,iBAAgBQ,UAC3BT,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA8BO,SAAA,EAE1CT,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAqBO,SAAA,EACjCC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,mBAChBS,EAAAA,EAAAA,KAACiK,EAAc,CACXlI,SAAUA,EACV0D,sBAAuBA,EACvBC,yBAA0BA,QAKlCpG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAyBO,SAAA,EACrCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,eACNT,EAAAA,EAAAA,MAAA,UACIoB,GAAG,eACHtB,MAAO+J,EACP9I,SAAU+I,EACV7J,UAAWC,EAA0BO,SAAA,EAErCC,EAAAA,EAAAA,KAAA,UAAQZ,MAAO,EAAEW,SAAC,OAClBC,EAAAA,EAAAA,KAAA,UAAQZ,MAAO,GAAGW,SAAC,QACnBC,EAAAA,EAAAA,KAAA,UAAQZ,MAAO,GAAGW,SAAC,QACnBC,EAAAA,EAAAA,KAAA,UAAQZ,MAAO,GAAGW,SAAC,qBAQtCyJ,IACGxJ,EAAAA,EAAAA,KAACkK,EAAAA,EAAK,CAACC,MAAM,gBAAgB1M,QAASA,IAAMgM,GAAmB,GAAO1J,UAClET,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA0BO,SAAA,EACtCT,EAAAA,EAAAA,MAAA,KAAAS,SAAA,CAAG,4BACyBC,EAAAA,EAAAA,KAAA,UAAAD,SAASwJ,EAAiBjH,SAAgB,oBACjEmD,GAAyBA,EAAsBnD,OAAS,GACtB,QAAnCmD,EAAsB,GAAGrG,QACrBY,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gEAGdC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sEACHT,EAAAA,EAAAA,MAAA,MAAAS,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAERC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4DACHT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaQ,SAAA,EACxBT,EAAAA,EAAAA,MAAA,UAAQC,UAAU,iBAAiBsB,QAxGhCuJ,KACvBlB,IACAO,GAAmB,EAAM,EAsG0D1J,SAAA,EAC3DC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,iBAAiB,0BAErCD,EAAAA,EAAAA,MAAA,UAAQC,UAAU,mBAAmBsB,QAASA,IAAM4I,GAAmB,GAAO1J,SAAA,EAC1EC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,iBAAiB,qBAQpDmK,IACG1J,EAAAA,EAAAA,KAACkK,EAAAA,EAAK,CAACC,MAAM,4BAA4B1M,QAASA,IAAMkM,GAA8B,GAAO5J,UACzFT,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA0BO,SAAA,EACtCT,EAAAA,EAAAA,MAAA,KAAAS,SAAA,CAAG,mDACgDC,EAAAA,EAAAA,KAAA,UAAAD,SAASwJ,EAAiBjH,SAAgB,aACxFmD,GAAyBA,EAAsBnD,OAAS,GACtB,QAAnCmD,EAAsB,GAAGrG,QACrBY,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gEAGdC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2BACHT,EAAAA,EAAAA,MAAA,MAAAS,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+CACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAERT,EAAAA,EAAAA,MAAA,KAAAS,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,UAAc,0GACzBC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6DACHT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaQ,SAAA,EACxBT,EAAAA,EAAAA,MAAA,UAAQC,UAAU,iBAAiBsB,QArIpBwJ,KACnCvG,EAAwByF,EAAkBxF,GAC1C4F,GAA8B,EAAM,EAmI2D5J,SAAA,EACvEC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,iBAAiB,sCAErCD,EAAAA,EAAAA,MAAA,UAAQC,UAAU,mBAAmBsB,QAASA,IAAM8I,GAA8B,GAAO5J,SAAA,EACrFC,EAAAA,EAAAA,KAAC6J,EAAAA,GAAI,CAACtK,UAAU,iBAAiB,uBAMtD,EC3LX,EAA8E,sCAA9E,EAAiI,oCAAjI,EAAgL,kCAAhL,EAAgO,qCAAhO,EAAmR,qCAAnR,EAA0U,yCAA1U,EAAgY,oCAAhY,EAAib,oCAAjb,EAAke,oCAAle,EAAqhB,sC,aCKrhB,MAuFA,EAvFwBhC,IAAwE,IAAvE,QAAEC,EAAO,cAAE8M,EAAa,gBAAEC,EAAe,cAAEC,EAAa,MAAEzG,GAAOxG,EAEtF,MAAM,WAAEI,IAAeE,EAAAA,EAAAA,MAGjB4M,EAAajN,EAAQa,QAAU,EAkC/BmJ,EC7CiBkD,EAAClN,EAASuG,KACjC,IAAKA,EAAO,MAAO,cAEnB,MACM4G,EADe5G,EAAMyC,QAAO/B,GAAQA,EAAKxG,aAAeT,EAAQS,aACrC2M,MAAK,CAACC,EAAGC,IAAMD,EAAExM,OAASyM,EAAEzM,SAE7D,IAAK,MAAMoG,KAAQkG,EAAa,CAC5B,MAAM,WAAEI,EAAU,OAAE1M,EAAM,MAAEqG,GAAUD,EACtC,OAAQsG,GACJ,IAAK,IACD,GAAIvN,EAAQa,SAAWA,EAAQ,OAAOqG,EACtC,MACJ,IAAK,IACD,GAAIlH,EAAQa,OAASA,EAAQ,OAAOqG,EACpC,MACJ,IAAK,IACD,GAAIlH,EAAQa,OAASA,EAAQ,OAAOqG,EACpC,MACJ,IAAK,KACD,GAAIlH,EAAQa,QAAUA,EAAQ,OAAOqG,EACrC,MACJ,IAAK,KACD,GAAIlH,EAAQa,QAAUA,EAAQ,OAAOqG,EAKjD,CACA,MAAO,aAAa,EDiBIgG,CAAYlN,EAASuG,GAGvCiH,EAAY,CAAExD,mBAEpB,OACIlI,EAAAA,EAAAA,MAAA,MAAIC,UAAWkL,EAAajL,EAAqB,GAAGO,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIT,UAAWC,EAAqBuJ,MAAOiC,EAAUjL,SAAEvC,EAAQS,cAC/D+B,EAAAA,EAAAA,KAAA,MAAI+I,MAAOiC,EAAUjL,SAAEvC,EAAQU,gBAC/B8B,EAAAA,EAAAA,KAAA,MAAI+I,MAAOiC,EAAUjL,SAxCDkL,KACxB,GAAsB,OAAlBA,QAA4CC,IAAlBD,EAA6B,MAAO,GAMlE,GAJAnL,QAAQiD,IAAI,mCAAoCkI,EAAe,eAAgBA,GAC/EnL,QAAQiD,IAAI,wBAAyBpF,GAGjCsF,MAAMgI,GAAgB,OAAOA,EAGjC,MAAME,EAAazI,SAASuI,EAAe,IAC3CnL,QAAQiD,IAAI,yBAA0BoI,GAGtC,MAAMC,EAAczN,EAAW6G,MAAK6G,IAEhC,MAAMC,EAA0B,kBAAXD,EAAI3K,GAAkBgC,SAAS2I,EAAI3K,GAAI,IAAM2K,EAAI3K,GAEtE,OADAZ,QAAQiD,IAAI,sBAAuBsI,EAAK,WAAYC,EAAO,WAAYH,GAChEG,IAAUH,CAAU,IAG/B,OAAIC,GACAtL,QAAQiD,IAAI,kBAAmBqI,EAAYjM,MACpCiM,EAAYjM,OAEnBW,QAAQiD,IAAI,gDAAiDkI,GACtDA,EACX,EAa2BM,CAAmB/N,EAAQY,aAClD4B,EAAAA,EAAAA,KAAA,MAAIT,UAAW,GAAGC,KAAqBiL,EAAajL,EAAkB,KAAMuJ,MAAOiC,EAAUjL,SACxFvC,EAAQa,UAEb2B,EAAAA,EAAAA,KAAA,MAAI+I,MAAOiC,EAAUjL,SAAEvC,EAAQW,QAC/B6B,EAAAA,EAAAA,KAAA,MAAIT,UAAWC,EAAmBO,UAC9BT,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAuBO,SAAA,EAEnCT,EAAAA,EAAAA,MAAA,UACIuB,QAASA,IAAMyJ,EAAc9M,GAC7B+B,UAAW,GAAGC,KAAqBA,IACnC2K,MAAM,eAAcpK,SAAA,EAEpBC,EAAAA,EAAAA,KAAC6J,EAAAA,EAAI,CAACtK,UAAU,iBAChBS,EAAAA,EAAAA,KAAA,QAAAD,SAAM,aAGVT,EAAAA,EAAAA,MAAA,UACIuB,QAASA,IAAM2J,EAAc,KAAMhN,GACnC+B,UAAW,GAAGC,KAAqBA,IACnC2K,MAAM,WAAUpK,SAAA,EAEhBC,EAAAA,EAAAA,KAAC6J,EAAAA,EAAI,CAACtK,UAAU,wBAChBS,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAGVC,EAAAA,EAAAA,KAAA,UACIa,QAASA,IAAM0J,EAAgB/M,EAAQS,YACvCsB,UAAW,GAAGC,KAAqBA,IACnC2K,MAAM,iBAAgBpK,UAEtBC,EAAAA,EAAAA,KAAC6J,EAAAA,EAAI,CAACtK,UAAU,8BAI3B,EExFb,EAAyJ,mCAAzJ,EAAkN,0CCkBlN,EAfqBhC,IAAkD,IAAjD,MAAE4M,EAAK,SAAEpK,EAAQ,QAAEtC,EAAO,OAAE+N,GAAS,GAAMjO,EAC7D,OACIyC,EAAAA,EAAAA,KAACkK,EAAAA,EAAK,CACFsB,OAAQA,EACRrB,MAAOA,EACP1M,QAASA,EACT8B,UAAWC,EAAoBO,UAE/BC,EAAAA,EAAAA,KAAA,OAAKT,UAAWC,EAA2BO,SACtCA,KAED,E,+BCdhB,QAAwC,4CAAxC,EAAmG,mC,sBCYnG,MAmHA,EAnH6B,WAKvB,IAHJ0L,EAAmBC,UAAApJ,OAAA,EAAAoJ,UAAA,QAAAR,EAEnBS,EAAiBD,UAAApJ,OAAA,EAAAoJ,UAAA,QAAAR,EAEjB,MAAOU,EAAWC,IAAgB7N,EAAAA,EAAAA,WAAS,IACpC8N,EAAwBC,IAA6B/N,EAAAA,EAAAA,WAAS,IAC9DgO,EAAiBC,IAAsBjO,EAAAA,EAAAA,UAAS,MAgGvD,MAAO,CACLkO,kBA3FwBvM,UACxB,IACEkM,GAAa,GAGb,MAGMM,EAHWC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,MAG/B/L,KAAIgM,GACnCA,EAAEvO,aAAeT,EAAQS,WAAaT,EAAUgP,IAIlDF,aAAaG,QAAQ,WAAYL,KAAKM,UAAUP,IAGhDV,EAAoBU,GACpBR,EAAkB,OAElBgB,EAAAA,EAAAA,IAAY,+BACd,CAAE,MAAO9M,GACPC,QAAQD,MAAM,0BAA2BA,IACzCqD,EAAAA,EAAAA,IAAU,2BACZ,CAAC,QACC2I,GAAa,EACf,GAmEAe,oBA5D4BC,IAC5BZ,EAAmBY,GACnBd,GAA0B,EAAK,EA2D/Be,6BA7CmCnN,UACnC,GAAKqM,EAEL,IACEH,GAAa,GACb/L,QAAQiD,IAAI,mCAAmCiJ,KAG/C,MAAMe,QAAiBC,EAAAA,GAAeC,cAAcjB,GAGpD,GAFAlM,QAAQiD,IAAI,uBAAwBgK,GAEZ,MAApBA,EAASG,OAAgB,CAC3BpN,QAAQiD,IAAI,WAAWiJ,wCAIvB,MAGMG,EAHWC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,MAG/B/F,QAAOgG,GAAKA,EAAEvO,aAAe+N,IAG9DM,aAAaG,QAAQ,WAAYL,KAAKM,UAAUP,IAGhDV,EAAoBU,IAEpBQ,EAAAA,EAAAA,IAAY,+BACd,MACE7M,QAAQD,MAAM,8BAA+BkN,EAASG,SACtDhK,EAAAA,EAAAA,IAAU,gDAEd,CAAE,MAAOrD,GAAQ,IAADsN,EAAAC,EACdtN,QAAQD,MAAM,0BAA2BA,IACzCqD,EAAAA,EAAAA,KAAwB,QAAdiK,EAAAtN,EAAMkN,gBAAQ,IAAAI,GAAM,QAANC,EAAdD,EAAgBE,YAAI,IAAAD,OAAN,EAAdA,EAAsBvN,QAASA,EAAMuD,SAAW,2BAC5D,CAAC,QACCyI,GAAa,GACbI,EAAmB,MACnBF,GAA0B,EAC5B,GAOAuB,oBAtD0BA,KAC1BrB,EAAmB,MACnBF,GAA0B,EAAM,EAqDhCD,yBACAE,kBACAJ,YAEJ,ECNA,EA5GqBrO,IAId,IAJe,iBAClB0L,EAAgB,aAChBsE,EAAY,cACZ/C,GACHjN,EACG,MAAM,iBACFgM,EAAgB,MAChBxF,EAAK,oBACL0H,EAAmB,cACnB+B,IACA3P,EAAAA,EAAAA,OAEG4P,EAAuBC,IAA4B1P,EAAAA,EAAAA,WAAS,IAC5D2P,EAAwBC,IAA6B5P,EAAAA,EAAAA,WAAS,IAC9D6P,EAAgBlC,IAAqB3N,EAAAA,EAAAA,UAAS,OAE/C,kBACFkO,EAAiB,oBACjBU,EAAmB,6BACnBE,EAA4B,oBAC5BQ,EAAmB,uBACnBxB,EAAsB,gBACtBE,GACA8B,EACA,KACArC,EACA+B,EACA7B,GAeJ,OACIrM,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA6BO,SAAA,EACzCC,EAAAA,EAAAA,KAAC+N,EAAoB,CACjB7E,cAAeA,ICtDHnH,KACxB,MAAMmC,EAAM,IAAIC,EAAAA,MAChBD,EAAIE,QAAQ,SACZF,EAAIG,KAAK,gBAAiB,GAAI,IAC9BH,EAAIY,UAAU,CACVC,OAAQ,GACRC,KAAM,CAAC,CAAC,aAAc,OAAQ,SAAU,OAAQ,aAChDC,KAAMlD,EAASvB,KAAIhD,GAAW,CAC1BA,EAAQS,WACRT,EAAQU,aACRV,EAAQa,OACRb,EAAQW,KACRX,EAAQY,YAEZ+G,MAAO,UACPC,WAAY,CAAEC,UAAW,CAAC,GAAI,IAAK,MACnC7F,OAAQ,CAAE8F,YAAa,EAAGC,SAAU,MAExCrB,EAAIsB,KAAK,eAAe,EDoCSwI,CAAYzE,GACjCP,kBAAmBA,IAAM0E,GAAyB,GAClDzE,iBAAkBA,EAClBsE,aAAcA,EACdxL,SAAUwH,EACVxF,MAAOA,KAEXzE,EAAAA,EAAAA,MAAA,SAAOC,UAAWC,EAAoBO,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SAAAD,UACIT,EAAAA,EAAAA,MAAA,MAAAS,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAGZC,EAAAA,EAAAA,KAAA,SAAAD,SACKiE,MAAMC,QAAQsF,IAAqBA,EAAiB/I,KAAKhD,IACtDwC,EAAAA,EAAAA,KAACiO,EAAe,CAEZzQ,QAASA,EACTuG,MAAOA,EACPuG,cAAeA,IAvCd9M,KACrBmO,EAAkBnO,GAClBoQ,GAA0B,EAAK,EAqCUM,CAAgB1Q,GACrC+M,gBAAiBqC,EACjBpC,cAAeA,IAAMA,EAAc,KAAMhN,IALpCA,EAAQS,mBAW5BwP,IACGzN,EAAAA,EAAAA,KAACmO,EAAY,CAAChE,MAAM,kBAAkB1M,QAASA,IAAMiQ,GAAyB,GAAO3N,UACjFC,EAAAA,EAAAA,KAACoO,EAAAA,QAAc,CAAC3Q,QAASA,IAAMiQ,GAAyB,OAI/DC,IACG3N,EAAAA,EAAAA,KAACmO,EAAY,CAAChE,MAAM,eAAe1M,QAASA,IAAMmQ,GAA0B,GAAO7N,UAC/EC,EAAAA,EAAAA,KAACqO,EAAAA,QAAe,CACZ7Q,QAASqQ,EACTpQ,QAASA,IAAMmQ,GAA0B,GACzClQ,gBAAiBwO,MAK5BJ,IACG9L,EAAAA,EAAAA,KAACsO,EAAAA,EAAiB,CACdnE,MAAM,iBACN/G,QAAS,oCA5DMmL,MAC3B,IAAKvC,EAAiB,MAAO,GAC7B,MAAMxO,EAAU+L,EAAiB/E,MAAKgI,GAAKA,EAAEvO,aAAe+N,IAC5D,OAAOxO,EAAUA,EAAQU,aAAe,EAAE,EAyDeqQ,kGAC7CC,UAAW1B,EACX2B,SAAUnB,EACVoB,kBAAkB,iBAClBC,iBAAiB,SACjBC,qBAAqB,aAG3B,C","sources":["components/ProductTable/ProductForm/EditProductForm.js","components/ProductTable/ProductForm/AddProductForm.js","webpack://inventory-app/./src/components/ProductTable/ProductForm/ProductForm.module.css?fd4b","utils/exportOrderRequirements.js","webpack://inventory-app/./src/components/ProductTable/ProductTableControls/ProductTableControls.module.css?57c1","webpack://inventory-app/./src/components/Header/CategorySelect/CategorySelect.module.css?334b","components/Header/CategorySelect/CategorySelect.js","components/ProductTable/ProductTableControls/ProductTableControls.js","webpack://inventory-app/./src/components/ProductTable/ProductTableRow/ProductTableRow.module.css?29a6","components/ProductTable/ProductTableRow/ProductTableRow.js","utils/getRowColor.js","webpack://inventory-app/./src/components/ProductTable/ProductModal/ProductModal.module.css?fea5","components/ProductTable/ProductModal/ProductModal.js","webpack://inventory-app/./src/components/ProductTable/ProductTable.module.css?ee82","hooks/useProductOperations.js","components/ProductTable/ProductTable.js","utils/exportToPDF.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./ProductForm.module.css\";\nimport Button from \"../../common/Button/Button\";\nimport { useAppContext } from \"../../../context/AppContext\";\n\n/**\n * EditProductForm component for editing existing products\n * @param {Object} props - Component props\n * @param {Object} props.product - The product to edit\n * @param {Function} props.onClose - Function to close the form\n * @param {Function} props.onUpdateProduct - Function to handle product updates\n */\nconst EditProductForm = ({ product, onClose, onUpdateProduct }) => {\n    const { categories, updateCategory } = useAppContext();\n    const [formData, setFormData] = useState({\n        product_id: product?.product_id || \"\",\n        product_name: product?.product_name || \"\",\n        unit: product?.unit || \"\",\n        category: product?.category || \"\",\n        amount: product?.amount || \"\"\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [showCategoryEdit, setShowCategoryEdit] = useState(false);\n    const [categoryToEdit, setCategoryToEdit] = useState(null);\n    const [newCategoryName, setNewCategoryName] = useState(\"\");\n    const [isUpdatingCategory, setIsUpdatingCategory] = useState(false);\n\n    useEffect(() => {\n        if (product) {\n            setFormData({\n                product_id: product.product_id,\n                product_name: product.product_name,\n                unit: product.unit,\n                category: product.category,\n                amount: product.amount\n            });\n        }\n    }, [product]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({\n            ...formData,\n            [name]: value\n        });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true);\n\n        try {\n            const success = await onUpdateProduct(formData);\n            if (success) {\n                onClose();\n            }\n        } catch (error) {\n            console.error(\"Error updating product:\", error);\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    const handleEditCategory = (category) => {\n        if (typeof category === 'object' && category !== null) {\n            setCategoryToEdit(category);\n            setNewCategoryName(category.name);\n            setShowCategoryEdit(true);\n        }\n    };\n\n    const handleCategoryUpdate = async () => {\n        if (!categoryToEdit || !newCategoryName.trim()) return;\n        \n        setIsUpdatingCategory(true);\n        try {\n            await updateCategory(categoryToEdit.id, newCategoryName);\n            setShowCategoryEdit(false);\n            setCategoryToEdit(null);\n            setNewCategoryName(\"\");\n        } catch (error) {\n            console.error(\"Error updating category:\", error);\n        } finally {\n            setIsUpdatingCategory(false);\n        }\n    };\n\n    return (\n        <form className={styles.form} onSubmit={handleSubmit}>\n            <h2 className={styles.heading}>Product Manager</h2>\n            <label>\n                Product ID:\n                <input\n                    type=\"text\"\n                    name=\"product_id\"\n                    value={formData.product_id}\n                    readOnly\n                    disabled\n                />\n            </label>\n            <label>\n                Product Name:\n                <input\n                    type=\"text\"\n                    name=\"product_name\"\n                    value={formData.product_name}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <label>\n                Unit:\n                <input\n                    type=\"text\"\n                    name=\"unit\"\n                    value={formData.unit}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <div className={styles.categoryContainer}>\n                <label>\n                    Category:\n                    <select\n                        name=\"category\"\n                        value={formData.category}\n                        onChange={handleChange}\n                        required\n                    >\n                        <option value=\"\">Select a category</option>\n                        {categories.map((category, index) => (\n                            <option key={index} value={typeof category === 'object' ? category.id : category}>\n                                {typeof category === 'object' ? category.name : category}\n                            </option>\n                        ))}\n                    </select>\n                </label>\n                <Button\n                    type=\"button\"\n                    variant=\"primary\"\n                    onClick={() => setShowCategoryEdit(!showCategoryEdit)}\n                >\n                    {showCategoryEdit ? \"Hide Category Editor\" : \"Edit Categories\"}\n                </Button>\n            </div>\n\n            {showCategoryEdit && (\n                <div className={styles.categoryEditSection}>\n                    <h3>Edit Category Names</h3>\n                    <p className={styles.helpText}>Select a category to rename it. This will update the category for all products.</p>\n                    \n                    <div className={styles.categoryList}>\n                        {categories.map((category, index) => (\n                            <div key={index} className={styles.categoryItem}>\n                                <span className={styles.categoryName}>\n                                    {typeof category === 'object' ? category.name : category}\n                                </span>\n                                <Button\n                                    type=\"button\"\n                                    variant=\"edit\"\n                                    onClick={() => handleEditCategory(category)}\n                                >\n                                    Edit\n                                </Button>\n                            </div>\n                        ))}\n                    </div>\n\n                    {categoryToEdit && (\n                        <div className={styles.categoryEditForm}>\n                            <h4>Rename \"{categoryToEdit.name}\"</h4>\n                            <div className={styles.editCategoryInput}>\n                                <input\n                                    type=\"text\"\n                                    value={newCategoryName}\n                                    onChange={(e) => setNewCategoryName(e.target.value)}\n                                    placeholder=\"New category name\"\n                                    required\n                                />\n                                <div className={styles.categoryEditButtons}>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"success\"\n                                        onClick={handleCategoryUpdate}\n                                        disabled={isUpdatingCategory}\n                                        icon=\"fas fa-save\"\n                                    >\n                                        {isUpdatingCategory ? \"Updating...\" : \"Update\"}\n                                    </Button>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"secondary\"\n                                        onClick={() => {\n                                            setCategoryToEdit(null);\n                                            setNewCategoryName(\"\");\n                                        }}\n                                        disabled={isUpdatingCategory}\n                                        icon=\"fas fa-times\"\n                                    >\n                                        Cancel\n                                    </Button>\n                                </div>\n                            </div>\n                            <p className={styles.warningText}>\n                                Warning: This will update all products that use this category.\n                            </p>\n                        </div>\n                    )}\n                </div>\n            )}\n\n            <label>\n                Amount:\n                <input\n                    type=\"number\"\n                    name=\"amount\"\n                    value={formData.amount}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <div className={styles.buttonGroup}>\n                <Button\n                    type=\"submit\"\n                    variant=\"success\"\n                    disabled={isSubmitting}\n                    icon=\"fas fa-save\"\n                >\n                    {isSubmitting ? \"Saving...\" : \"Save\"}\n                </Button>\n                <Button\n                    type=\"button\"\n                    onClick={onClose}\n                    variant=\"secondary\"\n                    disabled={isSubmitting}\n                    icon=\"fas fa-times\"\n                >\n                    Cancel\n                </Button>\n            </div>\n        </form>\n    );\n};\n\nexport default EditProductForm;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./ProductForm.module.css\";\nimport Button from \"../../common/Button/Button\";\nimport { useAppContext } from \"../../../context/AppContext\";\nimport { showError } from \"../../../utils/utils\";\n\n/**\n * Generates the next sequential product ID\n * @param {Array} products - Array of existing products\n * @returns {number} Next available product ID\n */\nconst getNextProductId = (products) => {\n    if (!products || products.length === 0) {\n        return 1; // Start with 1 if no products exist\n    }\n    \n    // Find the current highest product_id\n    const highestId = Math.max(...products.map(product => \n        // Ensure we're comparing numbers\n        typeof product.product_id === 'string' \n            ? parseInt(product.product_id, 10) \n            : product.product_id\n    ));\n    \n    return highestId + 1;\n};\n\n/**\n * Formats product ID with leading zeros for display\n * @param {number} id - Product ID number\n * @returns {string} Formatted product ID with leading zeros (e.g., 0001)\n */\nconst formatProductId = (id) => {\n    return id.toString().padStart(4, '0');\n};\n\n/**\n * AddProductForm component for adding new products\n * @param {Object} props - Component props\n * @param {Function} props.onClose - Function to close the form\n */\nconst AddProductForm = ({ onClose }) => {\n    const { addProduct, addCategory, deleteCategory, categories, products } = useAppContext();\n    const [newCategory, setNewCategory] = useState(\"\");\n    const [formData, setFormData] = useState({\n        product_id: null, // Will be set in useEffect after products are available\n        product_name: \"\",\n        unit: \"\",\n        category: \"\",\n        amount: \"\"\n    });\n    const [categoryToDelete, setCategoryToDelete] = useState(null);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const productNameRef = useRef(null);\n\n    // Set initial product ID when products load\n    useEffect(() => {\n        if (products && products.length >= 0) {\n            const nextId = getNextProductId(products);\n            setFormData(prevState => ({\n                ...prevState,\n                product_id: nextId\n            }));\n        }\n    }, [products]);\n\n    useEffect(() => {\n        // Focus on product_name field since product_id is auto-generated\n        if (productNameRef.current) {\n            productNameRef.current.focus();\n        }\n    }, []);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        console.log(`Form field ${name} changed to: ${value} (type: ${typeof value})`);\n        \n        // Add special handling for category to ensure consistency\n        if (name === 'category') {\n            console.log('Category selected:', value);\n            \n            // If value is numeric string, convert to number to be consistent with database\n            const newValue = !isNaN(value) ? parseInt(value, 10) : value;\n            console.log('Normalized category value:', newValue, '(type:', typeof newValue, ')');\n            \n            setFormData({\n                ...formData,\n                [name]: newValue\n            });\n        } else {\n            setFormData({\n                ...formData,\n                [name]: value\n            });\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true);\n\n        try {\n            // Validate form data\n            if (!formData.product_id || !formData.product_name || !formData.unit || !formData.category || formData.amount === \"\") {\n                showError(\"All fields are required\");\n                setIsSubmitting(false);\n                return;\n            }\n\n            // Ensure product_id is numeric\n            const submitData = {\n                ...formData,\n                product_id: parseInt(formData.product_id, 10)\n            };\n\n            const success = await addProduct(submitData);\n            if (success) {\n                onClose();\n            }\n        } catch (error) {\n            console.error(\"Error submitting form:\", error);\n            showError(error.message || \"Failed to add product\");\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    const handleAddCategory = async () => {\n        if (!newCategory.trim()) {\n            showError(\"Category name cannot be empty\");\n            return;\n        }\n\n        if (categories.includes(newCategory.trim())) {\n            showError(\"Category already exists\");\n            return;\n        }\n\n        try {\n            await addCategory(newCategory);\n            setNewCategory(\"\");\n        } catch (error) {\n            console.error(\"Error adding category:\", error);\n            showError(error.message || \"Failed to add category\");\n        }\n    };\n\n    const handleDeleteCategory = async () => {\n        if (!categoryToDelete) {\n            showError(\"Please select a category to delete\");\n            return;\n        }\n\n        try {\n            await deleteCategory(categoryToDelete);\n            setCategoryToDelete(null);\n            \n            // If deleted category was selected in the form, reset it\n            if (formData.category === categoryToDelete) {\n                setFormData({\n                    ...formData,\n                    category: \"\"\n                });\n            }\n        } catch (error) {\n            console.error(\"Error deleting category:\", error);\n            showError(error.message || \"Failed to delete category\");\n        }\n    };\n\n    return (\n        <form className={styles.form} onSubmit={handleSubmit}>\n            <h2 className={styles.heading}>Product Manager</h2>\n            <label>\n                Product ID:\n                <input\n                    type=\"text\"\n                    name=\"product_id\"\n                    value={formData.product_id ? `#${formatProductId(formData.product_id)}` : ''}\n                    readOnly\n                    className={styles.generatedField}\n                />\n                <small className={styles.fieldNote}>Auto-generated sequential ID</small>\n            </label>\n            <label>\n                Product Name:\n                <input\n                    type=\"text\"\n                    name=\"product_name\"\n                    value={formData.product_name}\n                    onChange={handleChange}\n                    ref={productNameRef}\n                    required\n                />\n            </label>\n            <label>\n                Unit:\n                <input\n                    type=\"text\"\n                    name=\"unit\"\n                    value={formData.unit}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <label>\n                Category:\n                <select\n                    name=\"category\"\n                    value={formData.category}\n                    onChange={handleChange}\n                    required\n                >\n                    <option value=\"\">Select a category</option>\n                    {categories.map((category, index) => (\n                        <option key={index} value={typeof category === 'object' ? category.id : category}>\n                            {typeof category === 'object' ? category.name : category}\n                        </option>\n                    ))}\n                </select>\n            </label>\n            <div className={styles.categorySection}>\n                <div className={styles.newCategoryInput}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"New category name\"\n                        value={newCategory}\n                        onChange={(e) => setNewCategory(e.target.value)}\n                    />\n                    <Button\n                        type=\"button\"\n                        onClick={handleAddCategory}\n                        variant=\"success\"\n                        icon=\"fas fa-plus\"\n                    >\n                        Add Category\n                    </Button>\n                </div>\n                <div className={styles.deleteCategoryInput}>\n                    <select\n                        value={categoryToDelete || \"\"}\n                        onChange={(e) => setCategoryToDelete(e.target.value)}\n                    >\n                        <option value=\"\">Select a category to delete</option>\n                        {categories.map((category, index) => (\n                            <option key={index} value={typeof category === 'object' ? category.id : category}>\n                                {typeof category === 'object' ? category.name : category}\n                            </option>\n                        ))}\n                    </select>\n                    <Button\n                        type=\"button\"\n                        onClick={handleDeleteCategory}\n                        variant=\"delete\"\n                        icon=\"fas fa-trash-alt\"\n                    >\n                        Delete Category\n                    </Button>\n                </div>\n            </div>\n            <label>\n                Amount:\n                <input\n                    type=\"number\"\n                    name=\"amount\"\n                    value={formData.amount}\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <div className={styles.buttonGroup}>\n                <Button type=\"submit\" variant=\"success\" icon=\"fas fa-save\" disabled={isSubmitting}>\n                    {isSubmitting ? \"Adding...\" : \"Add Product\"}\n                </Button>\n                <Button\n                    type=\"button\"\n                    onClick={onClose}\n                    variant=\"secondary\"\n                    disabled={isSubmitting}\n                    icon=\"fas fa-times\"\n                >\n                    Cancel\n                </Button>\n            </div>\n        </form>\n    );\n};\n\nexport default AddProductForm;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ProductForm_form__2eyCa\",\"heading\":\"ProductForm_heading__NA0ph\",\"generatedField\":\"ProductForm_generatedField__9VTzt\",\"fieldNote\":\"ProductForm_fieldNote__1MS8-\",\"newCategoryInput\":\"ProductForm_newCategoryInput__lIdil\",\"deleteCategoryInput\":\"ProductForm_deleteCategoryInput__IIZiA\",\"categorySection\":\"ProductForm_categorySection__yH2V+\",\"buttonGroup\":\"ProductForm_buttonGroup__Q+LmU\",\"customDropdown\":\"ProductForm_customDropdown__nFLPj\",\"selectedCategory\":\"ProductForm_selectedCategory__LPaC+\",\"dropdownMenu\":\"ProductForm_dropdownMenu__VpjEr\",\"dropdownItem\":\"ProductForm_dropdownItem__VkJb6\",\"categoryName\":\"ProductForm_categoryName__ohrn8\",\"deleteButton\":\"ProductForm_deleteButton__L7lFs\",\"addNewCategory\":\"ProductForm_addNewCategory__7EpW5\",\"addCategoryButton\":\"ProductForm_addCategoryButton__yE3NN\",\"noCategories\":\"ProductForm_noCategories__D7dwo\",\"categoryContainer\":\"ProductForm_categoryContainer__pTazC\",\"categoryEditSection\":\"ProductForm_categoryEditSection__Rpx2O\",\"helpText\":\"ProductForm_helpText__fBG5t\",\"warningText\":\"ProductForm_warningText__P8DAq\",\"categoryList\":\"ProductForm_categoryList__T7+n8\",\"categoryItem\":\"ProductForm_categoryItem__7x0wS\",\"categoryEditForm\":\"ProductForm_categoryEditForm__Wkt+4\",\"editCategoryInput\":\"ProductForm_editCategoryInput__Vm+En\",\"categoryEditButtons\":\"ProductForm_categoryEditButtons__+cDWB\"};","import { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\nconst exportOrderRequirements = (products, rules) => {\r\n    if (!Array.isArray(products)) {\r\n        console.error(\"Expected an array of products\");\r\n        return;\r\n    }\r\n\r\n    const doc = new jsPDF();\r\n    doc.setFont(\"Arial\");\r\n    doc.text('Order Requirements', 14, 16);\r\n\r\n    const orderRequirements = products.map(product => {\r\n        const greenRule = rules.find(rule => rule.product_id === product.product_id && rule.color === '#00ff00');\r\n        const amountNeeded = greenRule ? greenRule.amount - product.amount : 0;\r\n        return {\r\n            product_id: product.product_id,\r\n            product_name: product.product_name,\r\n            current_amount: product.amount,\r\n            amount_needed: amountNeeded > 0 ? amountNeeded : 0, // Ensure no negative values\r\n            unit: product.unit,\r\n            category: product.category\r\n        };\r\n    });\r\n\r\n    doc.autoTable({\r\n        startY: 20,\r\n        head: [['Product ID', 'Name', 'Current Amount', 'Amount Needed', 'Unit', 'Category']],\r\n        body: orderRequirements.map(item => [\r\n            item.product_id,\r\n            item.product_name,\r\n            item.current_amount,\r\n            item.amount_needed,\r\n            item.unit,\r\n            item.category\r\n        ]),\r\n        theme: 'striped',\r\n        headStyles: { fillColor: [22, 160, 133] },\r\n        styles: { cellPadding: 2, fontSize: 10 },\r\n    });\r\n\r\n    doc.save('order_requirements.pdf');\r\n};\r\n\r\nexport default exportOrderRequirements;","// extracted by mini-css-extract-plugin\nexport default {\"controls\":\"ProductTableControls_controls__aPeBQ\",\"buttonGroup\":\"ProductTableControls_buttonGroup__zJVt-\",\"filterWrapper\":\"ProductTableControls_filterWrapper__CVLGy\",\"inventoryCount\":\"ProductTableControls_inventoryCount__iJMYC\",\"paginationControl\":\"ProductTableControls_paginationControl__X433l\",\"itemsPerPageSelect\":\"ProductTableControls_itemsPerPageSelect__MNHy-\",\"controlsRightContainer\":\"ProductTableControls_controlsRightContainer__TeOeB\",\"exportModalContent\":\"ProductTableControls_exportModalContent__D5P6r\"};","// extracted by mini-css-extract-plugin\nexport default {\"headerDropdown\":\"CategorySelect_headerDropdown__qvlXj\",\"selectLabel\":\"CategorySelect_selectLabel__3DpVu\",\"filterDropdown\":\"CategorySelect_filterDropdown__DVVq8\",\"filterContainer\":\"CategorySelect_filterContainer__JzBcO\",\"filterLabel\":\"CategorySelect_filterLabel__73m0G\",\"filterSelect\":\"CategorySelect_filterSelect__iaUra\",\"noMoreCategories\":\"CategorySelect_noMoreCategories__wZsPq\"};","import React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport styles from \"./CategorySelect.module.css\";\nimport { useAppContext } from \"../../../context/AppContext\";\n\n/**\n * CategorySelect Component\n * This component renders a multi-select dropdown to filter products by category.\n * \n * Props:\n * - products: An array of product objects.\n * - selectedFilterOptions: An array of selected category options.\n * - setSelectedFilterOptions: Function to update the selected category options.\n */\nconst CategorySelect = ({ products, selectedFilterOptions, setSelectedFilterOptions }) => {\n    const [options, setOptions] = useState([]);\n    const { categories } = useAppContext();\n\n    // Extract unique categories from products and also include defined categories\n    useEffect(() => {\n        console.log(\"Products for categories:\", products);\n        console.log(\"Available categories from context:\", categories);\n        console.log(\"Current selected filter options:\", selectedFilterOptions);\n        \n        if (categories && categories.length > 0) {\n            // Create options from the categories in context\n            const categoryOptions = categories.map(category => {\n                // Check if category is an object with id and name properties\n                if (typeof category === 'object' && category !== null) {\n                    console.log(\"Category object:\", category);\n                    return {\n                        value: category.id.toString(), // Use ID as value but convert to string for consistency\n                        label: category.name\n                    };\n                } else {\n                    // Handle case where category might be just a string\n                    console.log(\"Category string:\", category);\n                    return {\n                        value: category,\n                        label: category\n                    };\n                }\n            });\n            \n            // Add \"All Categories\" option at the top\n            const allCategoriesOption = {\n                value: \"all\",\n                label: \"All Categories\",\n                isFixed: true  // This prevents the option from being removed\n            };\n            \n            const updatedOptions = [allCategoriesOption, ...categoryOptions];\n            console.log(\"Updated options array:\", updatedOptions);\n            setOptions(updatedOptions);\n        }\n    }, [categories, selectedFilterOptions, products]);\n\n    const handleChange = (selectedOptions) => {\n        console.log(\"Selected options:\", selectedOptions);\n        \n        // If no options are selected, show all products\n        if (!selectedOptions || selectedOptions.length === 0) {\n            setSelectedFilterOptions([]);\n            return;\n        }\n        \n        // If \"All Categories\" is selected, remove other selections\n        if (selectedOptions && \n            selectedOptions.some(option => option.value === \"all\") && \n            selectedOptions.length > 1) {\n            \n            const allCategoriesOption = options.find(option => option.value === \"all\");\n            setSelectedFilterOptions([allCategoriesOption]);\n            return;\n        }\n        \n        // If a regular category is selected and \"All Categories\" was previously selected,\n        // remove the \"All Categories\" option\n        if (selectedOptions && \n            selectedOptions.length > 1 && \n            selectedOptions.some(option => option.value === \"all\")) {\n            \n            const filteredOptions = selectedOptions.filter(option => option.value !== \"all\");\n            setSelectedFilterOptions(filteredOptions);\n            return;\n        }\n        \n        // For normal selections\n        setSelectedFilterOptions(selectedOptions);\n    };\n\n    const customStyles = {\n        control: (base) => ({\n            ...base,\n            minHeight: '38px',\n            border: '1px solid #ddd',\n            boxShadow: 'none',\n            '&:hover': {\n                borderColor: 'var(--primary)',\n            },\n        }),\n        menu: (base) => ({\n            ...base,\n            zIndex: 9999,\n            marginTop: '4px',\n            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\n            position: 'absolute',\n            width: '100%'\n        }),\n        menuList: (base) => ({\n            ...base,\n            padding: '6px',\n            maxHeight: '300px'\n        }),\n        option: (base, state) => ({\n            ...base,\n            backgroundColor: state.isSelected \n                ? 'var(--primary)' \n                : state.isFocused \n                    ? 'rgba(106, 17, 203, 0.1)' \n                    : 'white',\n            color: state.isSelected ? 'white' : '#333',\n            cursor: 'pointer',\n            borderRadius: '4px',\n            marginBottom: '2px',\n            padding: '8px 12px',\n            '&:hover': {\n                backgroundColor: state.isSelected \n                    ? 'var(--primary)' \n                    : 'rgba(106, 17, 203, 0.1)',\n            },\n            display: 'block'\n        }),\n        multiValue: (base) => ({\n            ...base,\n            backgroundColor: 'rgba(106, 17, 203, 0.1)',\n            borderRadius: '4px',\n        }),\n        multiValueLabel: (base) => ({\n            ...base,\n            color: '#333',\n            fontWeight: '500',\n            padding: '3px 6px',\n        }),\n        multiValueRemove: (base) => ({\n            ...base,\n            color: '#666',\n            ':hover': {\n                backgroundColor: 'rgba(106, 17, 203, 0.2)',\n                color: '#333',\n            },\n        }),\n    };\n\n    return (\n        <div className={styles.headerDropdown}>\n            <Select\n                isMulti\n                name=\"categories\"\n                options={options}\n                className={styles.filterSelect}\n                classNamePrefix=\"select\"\n                value={selectedFilterOptions}\n                onChange={handleChange}\n                placeholder=\"Select categories...\"\n                styles={customStyles}\n                isClearable={true}\n                closeMenuOnSelect={false}\n                hideSelectedOptions={false}\n                controlShouldRenderValue={true}\n                blurInputOnSelect={false}\n                menuPortalTarget={document.body}\n                menuPosition={'fixed'}\n                menuPlacement=\"auto\"\n                isSearchable={true}\n                backspaceRemovesValue={false}\n                autoFocus={false}\n            />\n            <div style={{display: 'none'}}>\n                Debug: {options.length} total options available\n            </div>\n        </div>\n    );\n};\n\nexport default CategorySelect;","import React, { useState } from \"react\";\nimport exportOrderRequirements from \"../../../utils/exportOrderRequirements\";\nimport styles from \"./ProductTableControls.module.css\";\nimport CategorySelect from \"../../Header/CategorySelect/CategorySelect\";\nimport { useAppContext } from \"../../../context/AppContext\";\nimport Modal from \"../../common/Modal/Modal\";\nimport { Icon } from \"../../../components/common\";\n\nconst ProductTableControls = ({\n    onAddProductClick,\n    onToggleRuleList,\n    onExportToPDF,\n    itemsPerPage,\n    onItemsPerPageChange,\n    products,\n    rules\n}) => {\n    const [showExportDropdown, setShowExportDropdown] = useState(false);\n    const { selectedFilterOptions, setSelectedFilterOptions, filteredProducts } = useAppContext();\n    const [showExportModal, setShowExportModal] = useState(false);\n    const [showOrderRequirementsModal, setShowOrderRequirementsModal] = useState(false);\n    \n    // Add debugging to see available products and categories\n    console.log(\"Products available in ProductTableControls:\", products);\n    console.log(\"Filtered products count:\", filteredProducts.length);\n    \n    const toggleExportDropdown = () => {\n        setShowExportDropdown(!showExportDropdown);\n    };\n\n    const handleExportToPDF = () => {\n        setShowExportModal(true);\n        setShowExportDropdown(false);\n    };\n\n    const handleExportOrderRequirements = () => {\n        setShowOrderRequirementsModal(true);\n        setShowExportDropdown(false);\n    };\n\n    const confirmExportToPDF = () => {\n        onExportToPDF();\n        setShowExportModal(false);\n    };\n\n    const confirmExportOrderRequirements = () => {\n        exportOrderRequirements(filteredProducts, rules);\n        setShowOrderRequirementsModal(false);\n    };\n\n    return (\n        <>\n            <div className=\"controls\">\n                {/* Primary actions */}\n                <div className=\"controls-left\">\n                    <button className=\"button primary\" onClick={onAddProductClick}>\n                        <Icon className=\"fas fa-plus\" /> Add Product\n                    </button>\n                    \n                    <button className=\"button secondary\" onClick={onToggleRuleList}>\n                        <Icon className=\"fas fa-list\" /> Rules\n                    </button>\n                    \n                    {/* Export dropdown */}\n                    <div className=\"actions-dropdown\">\n                        <button className=\"button secondary\" onClick={toggleExportDropdown}>\n                            <Icon className=\"fas fa-file-export\" /> Export <Icon className=\"fas fa-caret-down\" />\n                        </button>\n                        \n                        {showExportDropdown && (\n                            <div className=\"dropdown-content\">\n                                <button onClick={handleExportToPDF}>\n                                    <Icon className=\"fas fa-file-pdf\" />\n                                    Export to PDF\n                                </button>\n                                <button onClick={handleExportOrderRequirements}>\n                                    <Icon className=\"fas fa-shopping-cart\" />\n                                    Export Order Requirements\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                \n                <div className=\"controls-center\">\n                    {/* Inventory count */}\n                    <div className={styles.inventoryCount}>\n                        <Icon className=\"fas fa-cubes\" />\n                        Items in inventory: {filteredProducts.length}\n                    </div>\n                </div>\n                \n                <div className=\"controls-right\">\n                    <div className={styles.controlsRightContainer}>\n                        {/* Category filter with icon on the left */}\n                        <div className={styles.filterWrapper}>\n                            <Icon className=\"fas fa-filter\" />\n                            <CategorySelect\n                                products={products}\n                                selectedFilterOptions={selectedFilterOptions}\n                                setSelectedFilterOptions={setSelectedFilterOptions}\n                            />\n                        </div>\n                        \n                        {/* Pagination control right next to the filter */}\n                        <div className={styles.paginationControl}>\n                            <span>Per page:</span>\n                            <select\n                                id=\"itemsPerPage\"\n                                value={itemsPerPage}\n                                onChange={onItemsPerPageChange}\n                                className={styles.itemsPerPageSelect}\n                            >\n                                <option value={5}>5</option>\n                                <option value={10}>10</option>\n                                <option value={20}>20</option>\n                                <option value={50}>50</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {/* Export to PDF Confirmation Modal */}\n            {showExportModal && (\n                <Modal title=\"Export to PDF\" onClose={() => setShowExportModal(false)}>\n                    <div className={styles.exportModalContent}>\n                        <p>\n                            You are about to export <strong>{filteredProducts.length}</strong> products to PDF.\n                            {selectedFilterOptions && selectedFilterOptions.length > 0 && \n                            selectedFilterOptions[0].value !== \"all\" && (\n                                <span> These are filtered by your current category selection.</span>\n                            )}\n                        </p>\n                        <p>The PDF will include the following information for each product:</p>\n                        <ul>\n                            <li>Product ID</li>\n                            <li>Name</li>\n                            <li>Amount</li>\n                            <li>Unit</li>\n                            <li>Category</li>\n                        </ul>\n                        <p>Are you sure you want to export these products to PDF?</p>\n                        <div className=\"buttonGroup\">\n                            <button className=\"button success\" onClick={confirmExportToPDF}>\n                                <Icon className=\"fas fa-check\" /> Yes, Export to PDF\n                            </button>\n                            <button className=\"button secondary\" onClick={() => setShowExportModal(false)}>\n                                <Icon className=\"fas fa-times\" /> Cancel\n                            </button>\n                        </div>\n                    </div>\n                </Modal>\n            )}\n\n            {/* Export Order Requirements Confirmation Modal */}\n            {showOrderRequirementsModal && (\n                <Modal title=\"Export Order Requirements\" onClose={() => setShowOrderRequirementsModal(false)}>\n                    <div className={styles.exportModalContent}>\n                        <p>\n                            You are about to export order requirements for <strong>{filteredProducts.length}</strong> products.\n                            {selectedFilterOptions && selectedFilterOptions.length > 0 && \n                            selectedFilterOptions[0].value !== \"all\" && (\n                                <span> These are filtered by your current category selection.</span>\n                            )}\n                        </p>\n                        <p>The PDF will include:</p>\n                        <ul>\n                            <li>Product ID</li>\n                            <li>Name</li>\n                            <li>Current Amount</li>\n                            <li>Amount Needed (based on your green rules)</li>\n                            <li>Unit</li>\n                            <li>Category</li>\n                        </ul>\n                        <p><strong>Note:</strong> \"Amount Needed\" is calculated based on green rules (#00ff00) that specify target inventory levels.</p>\n                        <p>Are you sure you want to export the order requirements?</p>\n                        <div className=\"buttonGroup\">\n                            <button className=\"button success\" onClick={confirmExportOrderRequirements}>\n                                <Icon className=\"fas fa-check\" /> Yes, Export Order Requirements\n                            </button>\n                            <button className=\"button secondary\" onClick={() => setShowOrderRequirementsModal(false)}>\n                                <Icon className=\"fas fa-times\" /> Cancel\n                            </button>\n                        </div>\n                    </div>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default ProductTableControls;","// extracted by mini-css-extract-plugin\nexport default {\"rulesCell\":\"ProductTableRow_rulesCell__GoXaT\",\"centeredCell\":\"ProductTableRow_centeredCell__IcCZb\",\"amountCell\":\"ProductTableRow_amountCell__tmaAk\",\"lowStock\":\"ProductTableRow_lowStock__0zI-k\",\"lowStockRow\":\"ProductTableRow_lowStockRow__3SfJY\",\"actionsCell\":\"ProductTableRow_actionsCell__6Q4q+\",\"buttonContainer\":\"ProductTableRow_buttonContainer__cdE5F\",\"iconButton\":\"ProductTableRow_iconButton__oYcEz\",\"editButton\":\"ProductTableRow_editButton__XPI8J\",\"ruleButton\":\"ProductTableRow_ruleButton__GMnTb\",\"deleteButton\":\"ProductTableRow_deleteButton__TSxay\",\"actionsDropdown\":\"ProductTableRow_actionsDropdown__qUqKj\",\"dropdownContent\":\"ProductTableRow_dropdownContent__8BB9k\"};","import React from \"react\";\nimport styles from \"./ProductTableRow.module.css\";\nimport { useAppContext } from \"../../../context/AppContext\";\nimport { getRowColor } from \"../../../utils/getRowColor\";\nimport Icon from \"../../common/Icon\";\n\nconst ProductTableRow = ({ product, onEditProduct, onDeleteProduct, openRuleModal, rules }) => {\n    // Get categories from context to look up category names\n    const { categories } = useAppContext();\n    \n    // Check if amount is 0 or very low to apply warning class\n    const isLowStock = product.amount <= 0;\n    \n    // Get category name if product.category is a number\n    const getCategoryDisplay = (categoryValue) => {\n        if (categoryValue === null || categoryValue === undefined) return \"\";\n        \n        console.log(\"Looking up category display for:\", categoryValue, \"type:\", typeof categoryValue);\n        console.log(\"Available categories:\", categories);\n        \n        // If it's not a number, display as is\n        if (isNaN(categoryValue)) return categoryValue;\n        \n        // Convert categoryValue to a number to ensure consistent comparison\n        const categoryId = parseInt(categoryValue, 10);\n        console.log(\"Converted category ID:\", categoryId);\n        \n        // If it's a number, try to find the category name\n        const categoryObj = categories.find(cat => {\n            // Handle both string and number cases for IDs\n            const catId = typeof cat.id === 'string' ? parseInt(cat.id, 10) : cat.id;\n            console.log(\"Comparing category:\", cat, \"with ID:\", catId, \"against:\", categoryId);\n            return catId === categoryId;\n        });\n        \n        if (categoryObj) {\n            console.log(\"Found category:\", categoryObj.name);\n            return categoryObj.name;\n        } else {\n            console.log(\"Category not found, returning original value:\", categoryValue);\n            return categoryValue;\n        }\n    };\n    \n    // Get row background color based on rules\n    const backgroundColor = getRowColor(product, rules);\n    \n    // Common cell styling based on rule highlighting\n    const cellStyle = { backgroundColor };\n    \n    return (\n        <tr className={isLowStock ? styles.lowStockRow : ''}>\n            <td className={styles.centeredCell} style={cellStyle}>{product.product_id}</td>\n            <td style={cellStyle}>{product.product_name}</td>\n            <td style={cellStyle}>{getCategoryDisplay(product.category)}</td>\n            <td className={`${styles.amountCell} ${isLowStock ? styles.lowStock : ''}`} style={cellStyle}>\n                {product.amount}\n            </td>\n            <td style={cellStyle}>{product.unit}</td>\n            <td className={styles.actionsCell}>\n                <div className={styles.buttonContainer}>\n                    {/* All actions as direct buttons */}\n                    <button \n                        onClick={() => onEditProduct(product)} \n                        className={`${styles.iconButton} ${styles.editButton}`}\n                        title=\"Edit Product\"\n                    >\n                        <Icon className=\"fas fa-edit\" />\n                        <span>Edit</span>\n                    </button>\n                    \n                    <button \n                        onClick={() => openRuleModal(null, product)} \n                        className={`${styles.iconButton} ${styles.ruleButton}`}\n                        title=\"Add Rule\"\n                    >\n                        <Icon className=\"fas fa-plus-circle\" />\n                        <span>Add Rule</span>\n                    </button>\n                    \n                    <button \n                        onClick={() => onDeleteProduct(product.product_id)} \n                        className={`${styles.iconButton} ${styles.deleteButton}`}\n                        title=\"Delete Product\"\n                    >\n                        <Icon className=\"fas fa-trash-alt\" />\n                    </button>\n                </div>\n            </td>\n        </tr>\n    );\n};\n\nexport default ProductTableRow;\n","export const getRowColor = (product, rules) => {\r\n    if (!rules) return 'transparent'; // Add a check to ensure rules is defined\r\n\r\n    const productRules = rules.filter(rule => rule.product_id === product.product_id);\r\n    const sortedRules = productRules.sort((a, b) => a.amount - b.amount);\r\n\r\n    for (const rule of sortedRules) {\r\n        const { comparison, amount, color } = rule;\r\n        switch (comparison) {\r\n            case '=':\r\n                if (product.amount === amount) return color;\r\n                break;\r\n            case '<':\r\n                if (product.amount < amount) return color;\r\n                break;\r\n            case '>':\r\n                if (product.amount > amount) return color;\r\n                break;\r\n            case '<=':\r\n                if (product.amount <= amount) return color;\r\n                break;\r\n            case '>=':\r\n                if (product.amount >= amount) return color;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return 'transparent';\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ProductModal_modal__Yt9uE\",\"modalContent\":\"ProductModal_modalContent__cW5MN\",\"close\":\"ProductModal_close__TJgam\",\"productModal\":\"ProductModal_productModal__zf56k\",\"productModalContent\":\"ProductModal_productModalContent__6eRxk\",\"primary\":\"ProductModal_primary__Rg6CZ\",\"secondary\":\"ProductModal_secondary__K+Wms\",\"buttonGroup\":\"ProductModal_buttonGroup__M2ZCf\"};","import React from \"react\";\r\nimport Modal from \"../../common/Modal/Modal\";\r\nimport styles from \"./ProductModal.module.css\";\r\n\r\nconst ProductModal = ({ title, children, onClose, isOpen = true }) => {\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            title={title}\r\n            onClose={onClose}\r\n            className={styles.productModal}\r\n        >\r\n            <div className={styles.productModalContent}>\r\n                {children}\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProductModal;","// extracted by mini-css-extract-plugin\nexport default {\"productTableContainer\":\"ProductTable_productTableContainer__B2N24\",\"productTable\":\"ProductTable_productTable__+k0nE\"};","import { useState } from 'react';\r\nimport { showSuccess, showError } from '../services/toastService';\r\nimport { productService } from '../services/apiServices';\r\n\r\n/**\r\n * Custom hook for product operations\r\n * \r\n * @param {Object|null} initialValues - Initial values for the product\r\n * @param {Function} setFilteredProducts - Function to update filtered products\r\n * @param {Function} setCategories - Function to update categories\r\n * @param {Function} setEditingProduct - Function to set the product being edited\r\n * @returns {Object} Object containing handler functions\r\n */\r\nconst useProductOperations = (\r\n  initialValues = null,\r\n  setFilteredProducts,\r\n  setCategories,\r\n  setEditingProduct\r\n) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n  const [productToDelete, setProductToDelete] = useState(null);\r\n\r\n  /**\r\n   * Handle edit product operation\r\n   * @param {Object} product - Product to edit\r\n   */\r\n  const handleEditProduct = async (product) => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Get existing products from localStorage\r\n      const products = JSON.parse(localStorage.getItem('products') || '[]');\r\n      \r\n      // Update the product\r\n      const updatedProducts = products.map(p => \r\n        p.product_id === product.product_id ? product : p\r\n      );\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('products', JSON.stringify(updatedProducts));\r\n      \r\n      // Update state\r\n      setFilteredProducts(updatedProducts);\r\n      setEditingProduct(null);\r\n      \r\n      showSuccess('Product updated successfully');\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n      showError('Failed to update product');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Show delete confirmation modal for a product\r\n   * @param {string|number} productId - ID of the product to delete\r\n   */\r\n  const confirmDeleteProduct = (productId) => {\r\n    setProductToDelete(productId);\r\n    setShowDeleteConfirmation(true);\r\n  };\r\n\r\n  /**\r\n   * Cancel delete operation\r\n   */\r\n  const cancelDeleteProduct = () => {\r\n    setProductToDelete(null);\r\n    setShowDeleteConfirmation(false);\r\n  };\r\n\r\n  /**\r\n   * Handle delete product operation after confirmation\r\n   */\r\n  const handleDeleteProductConfirmed = async () => {\r\n    if (!productToDelete) return;\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      console.log(`Confirming deletion of product: ${productToDelete}`);\r\n      \r\n      // Call the API to delete the product from the database\r\n      const response = await productService.deleteProduct(productToDelete);\r\n      console.log('Delete API response:', response);\r\n      \r\n      if (response.status === 200) {\r\n        console.log(`Product ${productToDelete} deleted from database successfully`);\r\n        \r\n        // After successful API deletion, update the local state\r\n        // Get existing products from localStorage\r\n        const products = JSON.parse(localStorage.getItem('products') || '[]');\r\n        \r\n        // Filter out the deleted product\r\n        const updatedProducts = products.filter(p => p.product_id !== productToDelete);\r\n        \r\n        // Save to localStorage\r\n        localStorage.setItem('products', JSON.stringify(updatedProducts));\r\n        \r\n        // Update state\r\n        setFilteredProducts(updatedProducts);\r\n        \r\n        showSuccess('Product deleted successfully');\r\n      } else {\r\n        console.error('Unexpected response status:', response.status);\r\n        showError('Failed to delete product: Unexpected response');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      showError(error.response?.data?.error || error.message || 'Failed to delete product');\r\n    } finally {\r\n      setIsLoading(false);\r\n      setProductToDelete(null);\r\n      setShowDeleteConfirmation(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    handleEditProduct,\r\n    handleDeleteProduct: confirmDeleteProduct,\r\n    handleDeleteProductConfirmed,\r\n    cancelDeleteProduct,\r\n    showDeleteConfirmation,\r\n    productToDelete,\r\n    isLoading\r\n  };\r\n};\r\n\r\nexport default useProductOperations; ","import React, { useState } from 'react';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport ProductTableControls from \"./ProductTableControls/ProductTableControls\";\r\nimport ProductTableRow from './ProductTableRow/ProductTableRow';\r\nimport ProductModal from \"./ProductModal/ProductModal\";\r\nimport AddProductForm from \"./ProductForm/AddProductForm\";\r\nimport EditProductForm from \"./ProductForm/EditProductForm\";\r\nimport ConfirmationModal from \"../common/ConfirmationModal/ConfirmationModal\";\r\nimport styles from \"./ProductTable.module.css\";\r\nimport { exportToPDF } from '../../utils/exportToPDF';\r\nimport useProductOperations from \"../../hooks/useProductOperations\";\r\n\r\nconst ProductTable = ({ \r\n    onToggleRuleList, \r\n    showRuleList, \r\n    openRuleModal // This is the openRuleModal function from App.js\r\n}) => {\r\n    const { \r\n        filteredProducts, \r\n        rules,\r\n        setFilteredProducts,\r\n        setCategories\r\n    } = useAppContext();\r\n\r\n    const [isAddProductModalOpen, setIsAddProductModalOpen] = useState(false); // State for Add Product Modal\r\n    const [isEditProductModalOpen, setIsEditProductModalOpen] = useState(false); // State for Edit Product Modal\r\n    const [editingProduct, setEditingProduct] = useState(null); // State for the product being edited\r\n\r\n    const { \r\n        handleEditProduct, \r\n        handleDeleteProduct,\r\n        handleDeleteProductConfirmed,\r\n        cancelDeleteProduct,\r\n        showDeleteConfirmation,\r\n        productToDelete\r\n    } = useProductOperations(\r\n        null, \r\n        setFilteredProducts,\r\n        setCategories,\r\n        setEditingProduct\r\n    );\r\n\r\n    const handleEditClick = (product) => {\r\n        setEditingProduct(product); // Set the product to be edited\r\n        setIsEditProductModalOpen(true); // Open the Edit Product Modal\r\n    };\r\n\r\n    // Find the product name for the deletion confirmation\r\n    const getProductToDeleteName = () => {\r\n        if (!productToDelete) return \"\";\r\n        const product = filteredProducts.find(p => p.product_id === productToDelete);\r\n        return product ? product.product_name : \"\";\r\n    };\r\n\r\n    return (\r\n        <div className={styles.productTableContainer}>\r\n            <ProductTableControls\r\n                onExportToPDF={() => exportToPDF(filteredProducts)}\r\n                onAddProductClick={() => setIsAddProductModalOpen(true)} // Open Add Product Modal\r\n                onToggleRuleList={onToggleRuleList}\r\n                showRuleList={showRuleList}\r\n                products={filteredProducts}\r\n                rules={rules}\r\n            />\r\n            <table className={styles.productTable}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Product ID</th>\r\n                        <th>Name</th>\r\n                        <th>Category</th>\r\n                        <th>Amount</th>\r\n                        <th>Unit</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Array.isArray(filteredProducts) && filteredProducts.map((product) => (\r\n                        <ProductTableRow\r\n                            key={product.product_id}\r\n                            product={product}\r\n                            rules={rules}\r\n                            onEditProduct={() => handleEditClick(product)} // Pass the product to handleEditClick\r\n                            onDeleteProduct={handleDeleteProduct}\r\n                            openRuleModal={() => openRuleModal(null, product)}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            {/* Add Product Modal */}\r\n            {isAddProductModalOpen && (\r\n                <ProductModal title=\"Add New Product\" onClose={() => setIsAddProductModalOpen(false)}>\r\n                    <AddProductForm onClose={() => setIsAddProductModalOpen(false)} />\r\n                </ProductModal>\r\n            )}\r\n            {/* Edit Product Modal */}\r\n            {isEditProductModalOpen && (\r\n                <ProductModal title=\"Edit Product\" onClose={() => setIsEditProductModalOpen(false)}>\r\n                    <EditProductForm\r\n                        product={editingProduct} // Pass the product being edited\r\n                        onClose={() => setIsEditProductModalOpen(false)}\r\n                        onUpdateProduct={handleEditProduct}\r\n                    />\r\n                </ProductModal>\r\n            )}\r\n            {/* Delete Confirmation Modal */}\r\n            {showDeleteConfirmation && (\r\n                <ConfirmationModal\r\n                    title=\"Delete Product\"\r\n                    message={`Are you sure you want to delete \"${getProductToDeleteName()}\"? This action cannot be undone and will remove the product and its data from your inventory.`}\r\n                    onConfirm={handleDeleteProductConfirmed}\r\n                    onCancel={cancelDeleteProduct}\r\n                    confirmButtonText=\"Delete Product\"\r\n                    cancelButtonText=\"Cancel\"\r\n                    confirmButtonVariant=\"danger\"\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductTable;","import { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\nexport const exportToPDF = (products) => {\r\n    const doc = new jsPDF();\r\n    doc.setFont(\"Arial\");\r\n    doc.text('Product Table', 14, 16);\r\n    doc.autoTable({\r\n        startY: 20,\r\n        head: [['Product ID', 'Name', 'Amount', 'Unit', 'Category']],\r\n        body: products.map(product => [\r\n            product.product_id, \r\n            product.product_name, \r\n            product.amount, \r\n            product.unit, \r\n            product.category\r\n        ]),\r\n        theme: 'striped',\r\n        headStyles: { fillColor: [22, 160, 133] },\r\n        styles: { cellPadding: 2, fontSize: 10 },\r\n    });\r\n    doc.save('products.pdf');\r\n};"],"names":["_ref","product","onClose","onUpdateProduct","categories","updateCategory","useAppContext","formData","setFormData","useState","product_id","product_name","unit","category","amount","isSubmitting","setIsSubmitting","showCategoryEdit","setShowCategoryEdit","categoryToEdit","setCategoryToEdit","newCategoryName","setNewCategoryName","isUpdatingCategory","setIsUpdatingCategory","useEffect","handleChange","e","name","value","target","_jsxs","className","styles","form","onSubmit","async","preventDefault","error","console","children","_jsx","heading","type","readOnly","disabled","onChange","required","categoryContainer","map","index","id","Button","variant","onClick","categoryEditSection","helpText","categoryList","categoryItem","categoryName","handleEditCategory","categoryEditForm","editCategoryInput","placeholder","categoryEditButtons","trim","icon","warningText","buttonGroup","addProduct","addCategory","deleteCategory","products","newCategory","setNewCategory","categoryToDelete","setCategoryToDelete","productNameRef","useRef","length","nextId","Math","max","parseInt","getNextProductId","prevState","current","focus","log","newValue","isNaN","showError","submitData","message","toString","padStart","generatedField","fieldNote","ref","categorySection","newCategoryInput","includes","deleteCategoryInput","exportOrderRequirements","rules","Array","isArray","doc","jsPDF","setFont","text","orderRequirements","greenRule","find","rule","color","amountNeeded","current_amount","amount_needed","autoTable","startY","head","body","item","theme","headStyles","fillColor","cellPadding","fontSize","save","selectedFilterOptions","setSelectedFilterOptions","options","setOptions","updatedOptions","label","isFixed","Select","isMulti","classNamePrefix","selectedOptions","some","option","allCategoriesOption","filteredOptions","filter","control","base","minHeight","border","boxShadow","borderColor","menu","zIndex","marginTop","position","width","menuList","padding","maxHeight","state","backgroundColor","isSelected","isFocused","cursor","borderRadius","marginBottom","display","multiValue","multiValueLabel","fontWeight","multiValueRemove","isClearable","closeMenuOnSelect","hideSelectedOptions","controlShouldRenderValue","blurInputOnSelect","menuPortalTarget","document","menuPosition","menuPlacement","isSearchable","backspaceRemovesValue","autoFocus","style","onAddProductClick","onToggleRuleList","onExportToPDF","itemsPerPage","onItemsPerPageChange","showExportDropdown","setShowExportDropdown","filteredProducts","showExportModal","setShowExportModal","showOrderRequirementsModal","setShowOrderRequirementsModal","_Fragment","Icon","toggleExportDropdown","handleExportToPDF","handleExportOrderRequirements","CategorySelect","Modal","title","confirmExportToPDF","confirmExportOrderRequirements","onEditProduct","onDeleteProduct","openRuleModal","isLowStock","getRowColor","sortedRules","sort","a","b","comparison","cellStyle","categoryValue","undefined","categoryId","categoryObj","cat","catId","getCategoryDisplay","isOpen","setFilteredProducts","arguments","setEditingProduct","isLoading","setIsLoading","showDeleteConfirmation","setShowDeleteConfirmation","productToDelete","setProductToDelete","handleEditProduct","updatedProducts","JSON","parse","localStorage","getItem","p","setItem","stringify","showSuccess","handleDeleteProduct","productId","handleDeleteProductConfirmed","response","productService","deleteProduct","status","_error$response","_error$response$data","data","cancelDeleteProduct","showRuleList","setCategories","isAddProductModalOpen","setIsAddProductModalOpen","isEditProductModalOpen","setIsEditProductModalOpen","editingProduct","useProductOperations","ProductTableControls","exportToPDF","ProductTableRow","handleEditClick","ProductModal","AddProductForm","EditProductForm","ConfirmationModal","getProductToDeleteName","onConfirm","onCancel","confirmButtonText","cancelButtonText","confirmButtonVariant"],"sourceRoot":""}